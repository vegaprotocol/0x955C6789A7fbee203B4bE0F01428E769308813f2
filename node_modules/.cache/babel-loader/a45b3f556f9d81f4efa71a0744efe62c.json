{"remainingRequest":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js!/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Downloads/cryptowhaler/src/components/Landing/MarketView/BookPane/OrderBook/OrderBook.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Downloads/cryptowhaler/src/components/Landing/MarketView/BookPane/OrderBook/OrderBook.vue","mtime":1595121760000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\nimport ExchangeDataEventBus from '@/eventBuses/exchangeData';\nimport SimpleBar from 'simplebar';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport gql from 'graphql-tag';\nexport default {\n  name: 'order-book',\n  components: {\n    Spinner\n  },\n  props: {\n    parentHeight: Number\n  },\n\n  data() {\n    return {\n      marketId: 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN',\n      //this.$store.state.selectedVegaMarketId,\n      bids: [],\n      asks: [],\n      price: this.$store.state.liveTradePrice,\n      tableHeight: '',\n      orderHeight: '',\n      timeout: '',\n      orderbookdata: {},\n      showLoader: true,\n      snapF: 0,\n      sum: 0,\n      // precisionNumber: 1,\n      count: 1,\n      barAsk: 0,\n      barBid: 0,\n      order_updates: '',\n      buyPrice: 0,\n      sellPrice: 0\n    };\n  },\n\n  apollo: {\n    $subscribe: {\n      orders: {\n        query: gql`subscription name($marketId: String!) {\n                  orders (marketId: $marketId) {\n                      price\n                      side\n                      size\n                      market {\n                        name\n                      }\n                  }\n                } `,\n\n        variables() {\n          return {\n            marketId: this.marketId\n          };\n        },\n\n        result(data) {\n          // // console.log(data);\n          let orders = data.data.orders;\n          let asks = [];\n          let bids = [];\n\n          if (Array.isArray(orders) && this.snapF != 1) {\n            //When new connection, we take the snapshot\n            // // console.log('when snapshot');\n            this.snapF = 1; // // console.log(orders[0]);\n\n            orders.forEach(item => {\n              if (item.side == 'Buy') {\n                let localData = {};\n                localData.value = (Number(item.price) / 100000).toFixed(5);\n                localData.volume = Number(Math.abs(item.size));\n                bids.push(localData);\n              } else {\n                let localData = {};\n                localData.value = (Number(item.price) / 100000).toFixed(5);\n                localData.volume = Number(Math.abs(item.size));\n                asks.push(localData);\n              }\n            });\n            asks.sort(function (a, b) {\n              return a.value - b.value;\n            });\n            bids.sort(function (a, b) {\n              return a.value - b.value;\n            });\n            this.orderbookdata.asks = asks;\n            this.orderbookdata.bids = bids;\n            this.buyPrice = Number(bids[0].value);\n            this.sellPrice = Number(asks[0].value);\n            this.snapshotListener(this.orderbookdata);\n          } else {\n            // To update\n            // // console.log('else fiels');\n            if (this.orderbookdata.asks && this.orderbookdata.bids) {\n              // // console.log('For Update');\n              for (let i = 0; i < orders.length; i++) {\n                // // console.log(orders[i]);\n                if (orders[i].side == 'Buy') {\n                  //for bid\n                  // let flag = 0;\n                  // this.orderbookdata.bids.forEach(function (elem, index) {\n                  // if (elem.value == Number(orders.price)) {\n                  //   if (Number(orders.size) == 0 && orders.side == 'Buy') {\n                  //     this.orderbookdata.bids.splice(index, 1);\n                  //   } \n                  //   else {\n                  //     this.orderbookdata.bids[index].volume = Number(orders.size);\n                  //   }\n                  //   flag = 1;\n                  // }\n                  // if (index == (this.orderbookdata.bids.length - 1) && (flag == 0)) {  //No volume adjustment needed\n                  let localData = {};\n                  localData.value = (Number(orders[i].price) / 100000).toFixed(5);\n                  localData.volume = Number(orders[i].size);\n                  this.buyPrice = Number(localData.value); //Buy Price\n\n                  this.orderbookdata.bids.push(localData);\n                  this.orderbookdata.bids.sort(function (a, b) {\n                    return a.value - b.value;\n                  }); // // // console.log('bids working');\n                  // // // console.log(this.orderbookdata);\n\n                  if (this.orderbookdata.bids.length > 50) {\n                    this.orderbookdata.bids.pop();\n                  }\n                } // );\n                // } \n                else {\n                    //for Ask\n                    // let flag = 0;\n                    // this.orderbookdata.asks.forEach(function (elem, index) {\n                    // if (elem.value == Number(orders.price)) {\n                    //   if (Number(orders.size) == 0 && orders.side == 'Sell') {\n                    //     this.orderbookdata.asks.splice(index, 1);\n                    //   } \n                    //   else {\n                    //     this.orderbookdata.asks[index].volume = Number(orders.size);\n                    //   }\n                    //   flag = 1;\n                    // }\n                    // if (index == (this.orderbookdata.bids.length - 1) && (flag == 0)) {  //No volume adjustment needed\n                    let localData = {};\n                    localData.value = (Number(orders[i].price) / 100000).toFixed(5);\n                    localData.volume = Number(orders[i].size);\n                    this.sellPrice = Number(localData.value); //Sell Price                  \n\n                    this.orderbookdata.asks.push(localData);\n                    this.orderbookdata.asks.sort(function (a, b) {\n                      return a.value - b.value;\n                    });\n\n                    if (this.orderbookdata.asks.length > 50) {\n                      this.orderbookdata.asks.shift();\n                    }\n                  } // );\n\n              }\n            }\n\n            if (this.orderbookdata.asks.length > 9 && this.orderbookdata.bids.length > 9) {\n              // // console.log('callling update');\n              this.bookUpdateListener(this.orderbookdata);\n            }\n          }\n        }\n\n      }\n    }\n  },\n  // },\n  computed: {\n    maxVol() {\n      //Used \"width: (((Number(ask.totalVolume)/Number(maxVol))*308)) + '%',\" to determine width of dynamic bars\n      return Math.max(this.asks[this.asks.length - 1].totalVolume, this.bids[0].totalVolume);\n    }\n\n  },\n  methods: {\n    // precision(key) {\n    //   ExchangeDataEventBus.$emit('precision', {key,number: this.precisionNumber,});\n    //   if (key === 'minus' && this.precisionNumber !== 0) {\n    //     this.precisionNumber = this.precisionNumber - 1;\n    //     this.count = parseFloat(new Decimal(this.count).dividedBy('10').toString());\n    //   } \n    //   else if (key === 'plus' && this.precisionNumber !== 3) {\n    //     this.precisionNumber = this.precisionNumber + 1;\n    //     this.count = parseFloat(new Decimal(this.count).times(10).toString());\n    //   }\n    //   ExchangeDataEventBus.$emit('change-precision', {\n    //     precisionPass: this.count,\n    //     precisionNumber: this.precisionNumber,\n    //   });\n    //   this.timeout = setTimeout(() => this.scrollTopBookToBottom(), 2000);\n    // },\n    scrollTopBookToBottom() {\n      try {\n        let el = document.getElementById('ob-hello1');\n        let obj = new SimpleBar(el, {\n          autoHide: false\n        });\n        obj.getScrollElement().scrollTop = 9999999;\n      } catch (e) {\n        throw e;\n      }\n    },\n\n    asksUpdater(parsedSnap) {\n      if (parsedSnap && parsedSnap.asks && parsedSnap.asks.length) {\n        let asks = [parsedSnap.asks.length];\n\n        for (let i = 0; i < parsedSnap.asks.length; i++) {\n          if (i === 0) {\n            parsedSnap.asks[i].totalVolume = parsedSnap.asks[i].volume;\n          } else {\n            parsedSnap.asks[i].totalVolume = parsedSnap.asks[i].volume + parsedSnap.asks[i - 1].totalVolume;\n          }\n\n          asks[parsedSnap.asks.length - (i + 1)] = parsedSnap.asks[i];\n        }\n\n        return asks.reverse();\n      } else {\n        this.barAsk = 0;\n        return [];\n      }\n    },\n\n    bidsUpdater(parsedSnap) {\n      if (parsedSnap && parsedSnap.bids && parsedSnap.bids.length) {\n        let bids = [];\n\n        for (let i = parsedSnap.bids.length - 1; i >= 0; i--) {\n          if (i === parsedSnap.bids.length - 1) {\n            parsedSnap.bids[i].totalVolume = parsedSnap.bids[i].volume;\n          } else {\n            parsedSnap.bids[i].totalVolume = parsedSnap.bids[i].volume + parsedSnap.bids[i + 1].totalVolume;\n          }\n\n          bids.push(parsedSnap.bids[i]);\n        }\n\n        return bids.reverse();\n      } else {\n        this.barBid = 0;\n        return [];\n      }\n    }\n\n  },\n  watch: {\n    parentHeight: function (newVal) {\n      let height = newVal / 2;\n      let orderHeight = newVal / 2;\n      let calcHeight = height - 40;\n      this.tableHeight = calcHeight + 'px';\n      this.orderHeight = orderHeight + 'px';\n    }\n  },\n\n  created() {\n    this.count = 1;\n\n    this.snapshotListener = snap => {\n      // // console.log('Snapshot');\n      // // console.log(snap);\n      this.showLoader = false;\n      let parsedSnap = JSON.parse(JSON.stringify(snap));\n      this.asks = this.asksUpdater(parsedSnap);\n      this.bids = this.bidsUpdater(parsedSnap);\n      this.barAsk = this.asks[this.asks.length - 1].totalVolume;\n      this.barBid = this.bids[this.bids.length - 1].totalVolume;\n      this.timeout = setTimeout(() => this.scrollTopBookToBottom(), 2000);\n      this.$store.commit('removeLoaderTask', 1);\n    };\n\n    this.bookUpdateListener = snap => {\n      // // console.log('Update');\n      // // console.log(snap);\n      let parsedSnap = JSON.parse(JSON.stringify(snap)); // // // console.log('Parsed snap - ');\n      // // // console.log(parsedSnap);\n\n      this.asks = this.asksUpdater(parsedSnap);\n      this.bids = this.bidsUpdater(parsedSnap);\n      this.barAsk = this.asks[0].totalVolume;\n      this.barBid = this.bids[this.bids.length - 1].totalVolume;\n      this.showLoader = false; // this.snapshotListener(snap);\n    };\n\n    this.reset = newMarket => {\n      this.showLoader = true;\n      this.count = 1;\n      this.asks = [];\n      this.bids = [];\n      this.orderbookdata = {};\n      this.snapF = 0;\n      this.marketId = newMarket.Id; // console.log('New Selected Market being fetched in ORDER-BOOK with Id - ' + this.marketId);\n      // this.precisionNumber = 1;\n    };\n\n    ExchangeDataEventBus.$on('change-vega-market', this.reset);\n  },\n\n  mounted() {\n    this.$root.$on('tickerClicked', () => {\n      this.scrollTopBookToBottom();\n    });\n  },\n\n  destroyed() {\n    ExchangeDataEventBus.$on('change-vega-market', this.reset);\n    clearInterval(this.timeout);\n  }\n\n};",{"version":3,"sources":["OrderBook.vue"],"names":[],"mappings":"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","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport ExchangeDataEventBus from '@/eventBuses/exchangeData';\nimport SimpleBar from 'simplebar';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport gql from 'graphql-tag';\n\nexport default {\n  name: 'order-book',\n  components: {\n    Spinner,\n  },\n  props: {\n    parentHeight: Number,\n  },\n\n  data() {\n    return {\n      marketId: 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN', //this.$store.state.selectedVegaMarketId,\n      bids: [],\n      asks: [],\n      price: this.$store.state.liveTradePrice,\n      tableHeight: '',\n      orderHeight: '',\n      timeout: '',\n      orderbookdata: {},\n      showLoader: true,\n      snapF: 0,\n      sum: 0,\n      // precisionNumber: 1,\n      count: 1,\n      barAsk: 0,\n      barBid: 0,\n      order_updates: '',\n      buyPrice: 0,\n      sellPrice:0,\n    };\n  },\n\n  apollo: {\n    $subscribe: {\n      orders: {\n        query: gql`subscription name($marketId: String!) {\n                  orders (marketId: $marketId) {\n                      price\n                      side\n                      size\n                      market {\n                        name\n                      }\n                  }\n                } `,\n        variables() { return {marketId: this.marketId,}; },\n        result(data) {\n          // // console.log(data);\n          let orders = data.data.orders;\n          let asks = [];\n          let bids = [];\n\n          if (Array.isArray(orders) && this.snapF!=1) {     //When new connection, we take the snapshot\n            // // console.log('when snapshot');\n            this.snapF = 1;\n            // // console.log(orders[0]);\n            orders.forEach((item) => {\n              if (item.side == 'Buy') {\n                let localData = {};\n                localData.value = (Number(item.price)/100000).toFixed(5);\n                localData.volume = Number(Math.abs(item.size));\n                bids.push(localData);\n              } \n              else {\n                let localData = {};\n                localData.value = (Number(item.price)/100000).toFixed(5);\n                localData.volume = Number(Math.abs(item.size));\n                asks.push(localData);\n              }\n            });\n            asks.sort(function (a, b) {return a.value - b.value;});\n            bids.sort(function (a, b) {return a.value - b.value;});\n            this.orderbookdata.asks = asks;\n            this.orderbookdata.bids = bids;\n            this.buyPrice = Number(bids[0].value);\n            this.sellPrice = Number(asks[0].value);\n            this.snapshotListener(this.orderbookdata);\n          } \n          else {                                  // To update\n            // // console.log('else fiels');\n            if (this.orderbookdata.asks && this.orderbookdata.bids) {\n              // // console.log('For Update');\n\n              for (let i=0;i<orders.length;i++) {\n                // // console.log(orders[i]);\n                if (orders[i].side == 'Buy') {      //for bid\n                  // let flag = 0;\n                  // this.orderbookdata.bids.forEach(function (elem, index) {\n                  // if (elem.value == Number(orders.price)) {\n                  //   if (Number(orders.size) == 0 && orders.side == 'Buy') {\n                  //     this.orderbookdata.bids.splice(index, 1);\n                  //   } \n                  //   else {\n                  //     this.orderbookdata.bids[index].volume = Number(orders.size);\n                  //   }\n                  //   flag = 1;\n                  // }\n                  // if (index == (this.orderbookdata.bids.length - 1) && (flag == 0)) {  //No volume adjustment needed\n                  let localData = {};\n                  localData.value = (Number(orders[i].price)/100000).toFixed(5);\n                  localData.volume = Number(orders[i].size);\n                  this.buyPrice = Number(localData.value);      //Buy Price\n                  this.orderbookdata.bids.push(localData);\n                  this.orderbookdata.bids.sort(function (a, b) { return a.value - b.value; });\n                  // // // console.log('bids working');\n                  // // // console.log(this.orderbookdata);\n                  if (this.orderbookdata.bids.length > 50) {\n                    this.orderbookdata.bids.pop();                \n                  }\n                }\n                // );\n                // } \n                else {      //for Ask\n                  // let flag = 0;\n                  // this.orderbookdata.asks.forEach(function (elem, index) {\n                  // if (elem.value == Number(orders.price)) {\n                  //   if (Number(orders.size) == 0 && orders.side == 'Sell') {\n                  //     this.orderbookdata.asks.splice(index, 1);\n                  //   } \n                  //   else {\n                  //     this.orderbookdata.asks[index].volume = Number(orders.size);\n                  //   }\n                  //   flag = 1;\n                  // }\n                  // if (index == (this.orderbookdata.bids.length - 1) && (flag == 0)) {  //No volume adjustment needed\n                  let localData = {};\n                  localData.value = (Number(orders[i].price)/100000).toFixed(5);\n                  localData.volume = Number(orders[i].size);\n                  this.sellPrice = Number(localData.value);      //Sell Price                  \n                  this.orderbookdata.asks.push(localData);\n                  this.orderbookdata.asks.sort(function (a, b) { return a.value - b.value; });\n                  if (this.orderbookdata.asks.length > 50) {\n                    this.orderbookdata.asks.shift();                \n                  }                      \n                }\n                // );\n              }\n            }\n\n            if (this.orderbookdata.asks.length > 9 && this.orderbookdata.bids.length > 9) {\n              // // console.log('callling update');\n              this.bookUpdateListener(this.orderbookdata);\n            } \n          }\n        }, \n      },\n    },\n  },\n  // },\n\n  computed: {\n    maxVol() {    //Used \"width: (((Number(ask.totalVolume)/Number(maxVol))*308)) + '%',\" to determine width of dynamic bars\n      return Math.max(this.asks[this.asks.length - 1].totalVolume, this.bids[0].totalVolume);\n    },\n  },\n\n  methods: {\n    // precision(key) {\n    //   ExchangeDataEventBus.$emit('precision', {key,number: this.precisionNumber,});\n\n    //   if (key === 'minus' && this.precisionNumber !== 0) {\n    //     this.precisionNumber = this.precisionNumber - 1;\n    //     this.count = parseFloat(new Decimal(this.count).dividedBy('10').toString());\n    //   } \n    //   else if (key === 'plus' && this.precisionNumber !== 3) {\n    //     this.precisionNumber = this.precisionNumber + 1;\n    //     this.count = parseFloat(new Decimal(this.count).times(10).toString());\n    //   }\n    //   ExchangeDataEventBus.$emit('change-precision', {\n    //     precisionPass: this.count,\n    //     precisionNumber: this.precisionNumber,\n    //   });\n    //   this.timeout = setTimeout(() => this.scrollTopBookToBottom(), 2000);\n    // },\n    scrollTopBookToBottom() {\n      try {\n        let el = document.getElementById('ob-hello1');\n        let obj = new SimpleBar(el, {autoHide: false,});\n        obj.getScrollElement().scrollTop = 9999999;\n      } catch (e) {throw e;}\n    },\n    asksUpdater(parsedSnap) {\n      if (parsedSnap && parsedSnap.asks && parsedSnap.asks.length) {\n        let asks = [parsedSnap.asks.length,];\n        for (let i = 0; i < parsedSnap.asks.length; i++) {\n          if (i === 0) {\n            parsedSnap.asks[i].totalVolume = parsedSnap.asks[i].volume;\n          } \n          else {\n            parsedSnap.asks[i].totalVolume = parsedSnap.asks[i].volume + parsedSnap.asks[i - 1].totalVolume;\n          }\n          asks[parsedSnap.asks.length - (i + 1)] = parsedSnap.asks[i];\n        }\n        return asks.reverse();\n      } \n      else {\n        this.barAsk = 0;\n        return [];\n      }\n    },\n    bidsUpdater(parsedSnap) {\n      if (parsedSnap && parsedSnap.bids && parsedSnap.bids.length) {\n        let bids = [];\n        for (let i = parsedSnap.bids.length - 1; i >= 0; i--) {\n          if (i === parsedSnap.bids.length - 1) {\n            parsedSnap.bids[i].totalVolume = parsedSnap.bids[i].volume;\n          } else {\n            parsedSnap.bids[i].totalVolume = parsedSnap.bids[i].volume + parsedSnap.bids[i + 1].totalVolume;\n          }\n          bids.push(parsedSnap.bids[i]);\n        }\n        return bids.reverse();\n      } \n      else {\n        this.barBid = 0;\n        return [];\n      }\n    },\n  },\n\n  watch: {\n    parentHeight: function(newVal) {\n      let height = newVal / 2;\n      let orderHeight = newVal / 2;\n      let calcHeight = height - 40;\n      this.tableHeight = calcHeight + 'px';\n      this.orderHeight = orderHeight + 'px';\n    },\n  },\n\n  created() {\n    this.count = 1;\n\n    this.snapshotListener = snap => {\n      // // console.log('Snapshot');\n      // // console.log(snap);\n      this.showLoader = false;\n      let parsedSnap = JSON.parse(JSON.stringify(snap));\n      this.asks = this.asksUpdater(parsedSnap);\n      this.bids = this.bidsUpdater(parsedSnap);\n      this.barAsk = this.asks[this.asks.length - 1].totalVolume;\n      this.barBid = this.bids[this.bids.length - 1].totalVolume;\n      this.timeout = setTimeout(() => this.scrollTopBookToBottom(), 2000);\n      this.$store.commit('removeLoaderTask', 1);\n    };\n\n    this.bookUpdateListener = snap => {\n      // // console.log('Update');\n      // // console.log(snap);\n      let parsedSnap = JSON.parse(JSON.stringify(snap));\n      // // // console.log('Parsed snap - ');\n      // // // console.log(parsedSnap);\n      this.asks = this.asksUpdater(parsedSnap);\n      this.bids = this.bidsUpdater(parsedSnap);\n      this.barAsk = this.asks[0].totalVolume;\n      this.barBid = this.bids[this.bids.length - 1].totalVolume;\n      this.showLoader = false;\n      // this.snapshotListener(snap);\n    };\n\n    this.reset = (newMarket) => {\n      this.showLoader = true;\n      this.count = 1;\n      this.asks = [];\n      this.bids = [];\n      this.orderbookdata = {};\n      this.snapF = 0;\n      this.marketId = newMarket.Id;\n      // console.log('New Selected Market being fetched in ORDER-BOOK with Id - ' + this.marketId);\n      // this.precisionNumber = 1;\n    };\n\n    ExchangeDataEventBus.$on('change-vega-market', this.reset);\n  },\n\n  mounted() {\n    this.$root.$on('tickerClicked', () => {\n      this.scrollTopBookToBottom();\n    });\n  },\n  \n  destroyed() {\n    ExchangeDataEventBus.$on('change-vega-market', this.reset);\n    clearInterval(this.timeout);\n  },\n};\n</script>\n\n<style src=\"./style.scss\" lang=\"scss\" scoped></style>\n"],"sourceRoot":"src/components/Landing/MarketView/BookPane/OrderBook"}]}