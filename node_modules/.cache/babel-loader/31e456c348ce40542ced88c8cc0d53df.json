{"remainingRequest":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/thread-loader/dist/cjs.js!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/babel-loader/lib/index.js!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/eslint-loader/index.js??ref--13-0!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/main.js","dependencies":[{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/main.js","mtime":1595618551631},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport App from '@/App/App.vue';\nimport router from './router';\nimport store from './store'; // import { connect, } from 'mqtt';\n\nimport LocalStorage, { Keys, VegaKeys } from '@/utils/localStorage.js';\nimport EventBus, { EventNames } from '@/eventBuses/default';\nimport { uuidv4 } from './utils/utility';\nimport '@vuikit/theme';\nimport '@/assets/scss/base/icons.scss';\nimport ApolloClient from 'apollo-client'; //Apollo GraphQL\n\nimport { WebSocketLink } from 'apollo-link-ws'; //Apollo GraphQL\n\nimport { InMemoryCache } from 'apollo-cache-inmemory'; //Apollo GraphQL\n\nimport VueApollo from 'vue-apollo'; //Vue-Apollo plugin\n// import ApolloClient from \"apollo-boost\";  //BETTER\n\nimport '@/assets/scss/base/colors.scss';\nimport '@/assets/scss/base/core.scss';\nimport '@/assets/scss/base/typography.scss';\nimport '@/assets/scss/base/form-field.scss';\nimport '@/assets/scss/base/buttons.scss';\nimport '@/assets/scss/base/checkbox.scss';\nimport '@/assets/scss/base/containers.scss';\nimport '@/assets/scss/base/tables.scss';\nimport '@/assets/scss/base/scrollbar.scss';\nimport '@/assets/scss/base/panel.scss';\nimport '@/assets/scss/uk-overrides/modal.scss';\nimport '@/assets/scss/uk-overrides/subnav.scss';\nimport '@/assets/scss/uk-overrides/button.scss';\nimport '@/assets/scss/uk-overrides/tabs.scss';\nimport '@/assets/css/core.css';\nimport '@/assets/css/simplebar.css';\nimport '@/assets/css/colors.css'; // We area Link to connect ApolloClient with the GraphQL server.  \n// Subsequently, we instantiate ApolloClient \n// by passing in our Link and a new instance of InMemoryCache (recommended caching solution). Finally, \n// we are adding ApolloProvider to the Vue app.\n// const header = { Authorization: 'Bearer ' + VegaKeys.token, };\n\nconst vega_subs_link = new WebSocketLink({\n  //Link for Subscription and defining headers\n  uri: 'wss://n08.n.vega.xyz/query',\n  options: {\n    reconnect: true,\n    timeout: 150000\n  }\n}); // subscriptionClient.maxConnectTimeGenerator.duration = () => subscriptionClient.maxConnectTimeGenerator.max\n\nconst client = new ApolloClient({\n  link: vega_subs_link,\n  cache: new InMemoryCache({\n    addTypename: true\n  })\n});\nVue.use(VueApollo);\nconst apolloProvider = new VueApollo({\n  //holds the Apollo client instances that can then be used by all the child components\n  defaultClient: client\n});\n\nif (!LocalStorage.get(Keys.pingUuid)) {\n  LocalStorage.set(Keys.pingUuid, uuidv4());\n}\n\nEventBus.$on(EventNames.userLogin, () => {\n  //AUTH Session\n  store.commit('isLoggedIn', true);\n});\nEventBus.$on(EventNames.userLogout, () => {\n  //AUTH Session\n  const wasLoggedIn = store.getters.isLoggedIn;\n  store.commit('isLoggedIn', false);\n  LocalStorage.clearVegaSession(); // this.$store.commit\n\n  if (router.currentRoute.path !== '/' || wasLoggedIn) {\n    router.replace('/').catch(() => {});\n  }\n});\nconst isLoggedIn = LocalStorage.isUserLoggedIn();\nconst loggedInUser = LocalStorage.get(VegaKeys.name); //Vega Based\n\nconst mqttKey = LocalStorage.get(Keys.mqtt);\nVue.config.productionTip = false; // if (!isLoggedIn) {\n//   EventBus.$emit(EventNames.userLogout);\n// } else {\n//   EventBus.$emit(EventNames.userLogin, { username: loggedInUser,mqttKey:mqttKey,});\n// }\n\nnew Vue({\n  router,\n  store,\n  apolloProvider,\n  render: h => h(App)\n}).$mount('#app');\n\nif (!isLoggedIn) {\n  EventBus.$emit(EventNames.userLogout);\n} else {\n  EventBus.$emit(EventNames.userLogin, {\n    username: loggedInUser,\n    mqttKey: mqttKey\n  });\n}",{"version":3,"sources":["/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/main.js"],"names":["Vue","App","router","store","LocalStorage","Keys","VegaKeys","EventBus","EventNames","uuidv4","ApolloClient","WebSocketLink","InMemoryCache","VueApollo","vega_subs_link","uri","options","reconnect","timeout","client","link","cache","addTypename","use","apolloProvider","defaultClient","get","pingUuid","set","$on","userLogin","commit","userLogout","wasLoggedIn","getters","isLoggedIn","clearVegaSession","currentRoute","path","replace","catch","isUserLoggedIn","loggedInUser","name","mqttKey","mqtt","config","productionTip","render","h","$mount","$emit","username"],"mappings":"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","sourcesContent":["import Vue from 'vue';\nimport App from '@/App/App.vue';\nimport router from './router';\nimport store from './store';\n// import { connect, } from 'mqtt';\nimport LocalStorage, { Keys,VegaKeys,} from '@/utils/localStorage.js';\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport { uuidv4, } from './utils/utility';\nimport '@vuikit/theme';\nimport '@/assets/scss/base/icons.scss';\nimport ApolloClient from 'apollo-client';     //Apollo GraphQL\nimport {WebSocketLink,} from 'apollo-link-ws'; //Apollo GraphQL\nimport { InMemoryCache, } from 'apollo-cache-inmemory';  //Apollo GraphQL\nimport VueApollo from 'vue-apollo';   //Vue-Apollo plugin\n// import ApolloClient from \"apollo-boost\";  //BETTER\nimport '@/assets/scss/base/colors.scss';\nimport '@/assets/scss/base/core.scss';\nimport '@/assets/scss/base/typography.scss';\nimport '@/assets/scss/base/form-field.scss';\nimport '@/assets/scss/base/buttons.scss';\nimport '@/assets/scss/base/checkbox.scss';\nimport '@/assets/scss/base/containers.scss';\nimport '@/assets/scss/base/tables.scss';\nimport '@/assets/scss/base/scrollbar.scss';\nimport '@/assets/scss/base/panel.scss';\nimport '@/assets/scss/uk-overrides/modal.scss';\nimport '@/assets/scss/uk-overrides/subnav.scss';\nimport '@/assets/scss/uk-overrides/button.scss';\nimport '@/assets/scss/uk-overrides/tabs.scss';\nimport '@/assets/css/core.css';\nimport '@/assets/css/simplebar.css';\nimport '@/assets/css/colors.css';\n\n// We area Link to connect ApolloClient with the GraphQL server.  \n// Subsequently, we instantiate ApolloClient \n// by passing in our Link and a new instance of InMemoryCache (recommended caching solution). Finally, \n// we are adding ApolloProvider to the Vue app.\n\n\n// const header = { Authorization: 'Bearer ' + VegaKeys.token, };\nconst vega_subs_link = new WebSocketLink({    //Link for Subscription and defining headers\n  uri: 'wss://n08.n.vega.xyz/query',\n  options: {\n    reconnect: true,\n    timeout:150000,\n  },\n});\n\n// subscriptionClient.maxConnectTimeGenerator.duration = () => subscriptionClient.maxConnectTimeGenerator.max\n\nconst client = new ApolloClient({\n  link: vega_subs_link,\n  cache: new InMemoryCache({\n    addTypename: true,\n  }),\n});\n\nVue.use(VueApollo);\n\nconst apolloProvider = new VueApollo({  //holds the Apollo client instances that can then be used by all the child components\n  defaultClient: client,\n});\n\nif (!LocalStorage.get(Keys.pingUuid)) {       \n  LocalStorage.set(Keys.pingUuid, uuidv4());\n}\n\nEventBus.$on(EventNames.userLogin, () => {    //AUTH Session\n  store.commit('isLoggedIn', true);\n});\n\nEventBus.$on(EventNames.userLogout, () => {           //AUTH Session\n  const wasLoggedIn = store.getters.isLoggedIn;\n  store.commit('isLoggedIn', false);\n  LocalStorage.clearVegaSession();\n  // this.$store.commit\n  if (router.currentRoute.path !== '/' || wasLoggedIn) {\n    router.replace('/').catch(() => {});\n  }\n});\n\nconst isLoggedIn = LocalStorage.isUserLoggedIn();   \nconst loggedInUser = LocalStorage.get(VegaKeys.name);     //Vega Based\nconst mqttKey = LocalStorage.get(Keys.mqtt);\n\nVue.config.productionTip = false;\n\n// if (!isLoggedIn) {\n//   EventBus.$emit(EventNames.userLogout);\n// } else {\n//   EventBus.$emit(EventNames.userLogin, { username: loggedInUser,mqttKey:mqttKey,});\n// }\n\nnew Vue({\n  router,\n  store,\n  apolloProvider,\n  render: h => h(App),\n}).$mount('#app');\n\nif (!isLoggedIn) {\n  EventBus.$emit(EventNames.userLogout);\n} else {\n  EventBus.$emit(EventNames.userLogin, {username: loggedInUser,mqttKey:mqttKey, });\n}\n\n"]}]}