{"remainingRequest":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/thread-loader/dist/cjs.js!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/babel-loader/lib/index.js!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/components/PositionsMobile/Positions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/components/PositionsMobile/Positions.vue","mtime":1595618551922},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\nimport EventBus, { EventNames } from '@/eventBuses/default';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport { VegaKeys } from '@/utils/localStorage.js';\nimport gql from 'graphql-tag';\nexport default {\n  name: 'positions-mobile',\n  components: {\n    Spinner\n  },\n  props: {\n    parentHeight: Number,\n    open: {\n      type: Boolean\n    }\n  },\n\n  data() {\n    return {\n      positions: [],\n      markets: [],\n      subs_positions: new Map(),\n      positions_array: [],\n      isLoggedIn: false,\n      partiesId: 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN',\n      //VegaKeys.currentActiveKey,\n      totalRealizedPNL_VUSD: 0,\n      totalUnrealizedPNL_VUSD: 0,\n      totalRealizedPNL_BTC: 0,\n      totalUnrealizedPNL_BTC: 0,\n      dropdownSelections: [],\n      dropdownMarkets: this.$store.getters.markets\n    };\n  },\n\n  // computed: {\n  //   positions() {\n  //     return this.mapActiveOrders(this.$store.getters.positions);\n  //   },\n  // },\n  apollo: {\n    $subscribe: {\n      positions: {\n        query: gql`subscription name($partyId: String!) {\n                    positions (partyId: $partyId) {\n                        market {\n                          id\n                          name\n                        }\n                        openVolume\n                        realisedPNL\n                        unrealisedPNL\n                        averageEntryPrice\n                        margins{\n                          maintenanceLevel\n                          searchLevel\n                          initialLevel\n                          collateralReleaseLevel\n                        }\n                      }\n                    }`,\n\n        variables() {\n          return {\n            partyId: this.partiesId\n          };\n        },\n\n        result({\n          data,\n          loading\n        }) {\n          if (loading) {// console.log('loading');\n          }\n\n          let _positions = data.positions; // // console.log(_positions);\n\n          this.subcribeToPositions(_positions);\n        }\n\n      }\n    }\n  },\n\n  mounted() {\n    this.userLoginListener = () => this.setPubKey();\n\n    this.userLogoutListener = () => this.positions = [];\n\n    EventBus.$on(EventNames.userLogin, this.userLoginListener); //GET POSITIONS\n\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener); //GO EMPTY AGAIN\n\n    EventBus.$on(EventNames.pubKeyChanged, this.userLoginListener); //to handle change in pubKey    \n  },\n\n  methods: {\n    setPubKey() {\n      // // console.log(VegaKeys.currentActiveKey);\n      this.positions_array = [];\n      this.positions = []; // console.log(this.dropdownMarkets);\n\n      this.dropdownMarkets = [];\n      let markets = this.$store.getters.markets;\n\n      for (let i = 0; i < markets.length; i++) {\n        //used for populating dropdown\n        let cur = {};\n        cur.id = markets[i].id;\n        cur.name = markets[i].data.name;\n        this.dropdownMarkets.push(cur);\n      } // this.dropdownMarkets = \n      // console.log(this.dropdownMarkets);\n\n\n      this.markets = this.$store.getters.mappedMarketsbyName;\n      this.$store.commit('totalRealizedPNL_VUSD', 0);\n      this.$store.commit('totalUnrealizedPNL_VUSD', 0);\n      this.$store.commit('totalRealizedPNL_BTC', 0);\n      this.$store.commit('totalUnrealizedPNL_BTC', 0);\n      this.partiesId = VegaKeys.currentActiveKey; // // console.log(this.partiesId);\n    },\n\n    subcribeToPositions(positions) {\n      // if (!this.subs_positions.has(positions.market.id)) {\n      let obj = [];\n      obj.averageEntryPrice = (Number(positions.averageEntryPrice) / 100000).toFixed(5);\n      obj.openVolume = Number(positions.openVolume);\n      obj.realisedPNL = (Number(positions.realisedPNL) / 100000).toFixed(5);\n      obj.unrealisedPNL = (Number(positions.unrealisedPNL) / 100000).toFixed(5);\n      obj.maintenanceLevel = (Number(positions.margins[0].maintenanceLevel) / 100000).toFixed(5);\n      obj.searchLevel = (Number(positions.margins[0].searchLevel) / 100000).toFixed(5);\n      obj.collateralReleaseLevel = (Number(positions.margins[0].collateralReleaseLevel) / 100000).toFixed(5);\n      obj.initialLevel = (Number(positions.margins[0].initialLevel) / 100000).toFixed(5);\n      obj.market_name = positions.market.name;\n      obj.marketID = positions.market.id;\n      this.subs_positions.set(String(positions.market.id), obj); // // console.log(this.subs_positions);\n\n      this.positions_array = Array.from(this.subs_positions, ([name, value]) => ({\n        name,\n        value\n      }));\n      this.totalRealizedPNL_VUSD = 0;\n      this.totalUnrealizedPNL_VUSD = 0;\n      this.totalRealizedPNL_BTC = 0;\n      this.totalUnrealizedPNL_BTC = 0;\n\n      for (let i = 0; i < this.positions_array.length; i++) {\n        // // console.log(this.positions_array);\n        // // console.log(this.$store.getters.mappedMarketsbyName);\n        if (this.$store.getters.mappedMarketsbyName.has(this.positions_array[i].value.market_name)) {\n          // // console.log(this.markets);\n          // // console.log(this.positions_array[i].value.market_name);\n          let cur = this.$store.getters.mappedMarketsbyName.get(this.positions_array[i].value.market_name); // // console.log(cur);\n\n          if (cur.quoteName == 'VUSD') {\n            this.totalRealizedPNL_VUSD = Number(this.totalRealizedPNL_VUSD) + Number(this.positions_array[i].value.realisedPNL);\n            this.totalUnrealizedPNL_VUSD = Number(this.totalUnrealizedPNL_VUSD) + Number(this.positions_array[i].value.unrealisedPNL);\n            this.$store.commit('totalRealizedPNL_VUSD', this.totalRealizedPNL_VUSD);\n            this.$store.commit('totalUnrealizedPNL_VUSD', this.totalUnrealizedPNL_VUSD);\n          }\n\n          if (cur.quoteName == 'BTC') {\n            this.totalRealizedPNL_BTC = Number(this.totalRealizedPNL_BTC) + Number(this.positions_array[i].value.realisedPNL);\n            this.totalUnrealizedPNL_BTC = Number(this.totalUnrealizedPNL_BTC) + Number(this.positions_array[i].value.unrealisedPNL);\n            this.$store.commit('totalRealizedPNL_BTC', this.totalRealizedPNL_BTC);\n            this.$store.commit('totalUnrealizedPNL_BTC', this.totalUnrealizedPNL_BTC);\n          }\n        }\n      }\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    userLogoutListener() {\n      this.positions_array = [];\n      this.positions = [];\n      this.$store.commit('totalRealizedPNL', 0);\n      this.$store.commit('totalUnrealizedPNL', 0);\n    },\n\n    async closeAllPositions() {\n      let curr_array = this.positions_array; // console.log(curr_array);\n\n      for (let i = 0; i < curr_array.length; i++) {\n        if (curr_array[i].value.openVolume != 0) {\n          let resp = await this.closePosition(curr_array[i].value);\n        }\n      }\n    },\n\n    //Closes all Positions, Cancels All Orders\n    async closeAllPositionsAndCancelAllOrders() {\n      let curr_array = this.positions_array; // console.log(curr_array);\n      //For loop to close all Positions\n\n      for (let i = 0; i < curr_array.length; i++) {\n        if (curr_array[i].value.openVolume != 0) {\n          let resp = await this.closePositionAndCancelOrders(curr_array[i].value);\n        }\n      }\n\n      this.$showSuccessMsg({\n        message: 'All Positions have been closed'\n      });\n      this.$showSuccessMsg({\n        message: 'All Active Orders have been cancelled'\n      });\n    },\n\n    //CALLS .closePosition and .cancelAllOrders to close position and cancel All Orders\n    async closePositionAndCancelOrders(position) {\n      let closePosition = await this.closePosition(position);\n      this.$showSuccessMsg({\n        message: 'The Position for the market \\'' + position.market_name + '\\' has been closed'\n      });\n      let activeOrders = this.$store.getters.activeOrders; // console.log(activeOrders);\n\n      let cancelAllOrders = await this.cancelAllOrders(position);\n    },\n\n    //Cancels all Active Orders for the selected Position's Market\n    async cancelAllOrders(position) {\n      let activeOrders = this.$store.getters.activeOrders; // console.log(activeOrders);\n\n      for (let i = 0; i < activeOrders.length; i++) {\n        if (position.marketID == activeOrders[i].marketID) {\n          // console.log(activeOrders[i]);\n          let cancelOrder = await this.cancelOrder(activeOrders[i]);\n        }\n      }\n\n      this.$showSuccessMsg({\n        message: 'All active Orders for the market \\'' + position.market_name + '\\' have been cancelled'\n      });\n    },\n\n    //Closes the Position\n    async closePosition(position) {\n      //CLOSES POSITION FOR THE POSITION OBJECT PASSED\n      // console.log(';IN CLOSEPOSITION + ' + position.openVolume + '   ' + Number(position.openVolume) );\n      if (Number(position.openVolume) > 0) {\n        //If having long position\n        // console.log(';IN CLOSEPOSITION');\n        const response = await VegaProtocolService.submitOrder_market(position.marketID, position.openVolume, 'Sell', 'MARKET', 'FOK');\n\n        if (response.status == 200) {\n          //If Successful\n          this.$showSuccessMsg({\n            message: position.market_name + ' - ' + response.message\n          });\n        } else {\n          //If failed.\n          this.$showErrorMsg({\n            message: position.market_name + ' - ' + response.message\n          });\n          this.$showErrorMsg({\n            message: 'Could\\t close position. Please try again'\n          });\n        }\n      } else if (Number(position.openVolume) < 0) {\n        //If having short position\n        // console.log(';IN CLOSEPOSITION');\n        const response = await VegaProtocolService.submitOrder_market(position.marketID, Math.abs(Number(position.openVolume)).toString(), 'Buy', 'MARKET', 'FOK');\n\n        if (response.status == 200) {\n          //If Successful\n          this.$showSuccessMsg({\n            message: position.market_name + ' - ' + response.message\n          });\n        } else {\n          //If failed.\n          this.$showErrorMsg({\n            message: position.market_name + ' - ' + response.message\n          });\n          this.$showErrorMsg({\n            message: 'Could\\t close position. Please try again'\n          });\n        }\n      } else if (Number(position.openVolume) == 0) {\n        this.$showErrorMsg({\n          message: 'There are no active positions for the selected market'\n        });\n      }\n    },\n\n    //Cancels the passed Order\n    async cancelOrder(order) {\n      //CANCELS THE PASSED ORDER \n      // console.log(order); \n      this.$store.commit('addLoaderTask', 1, false); // console.log('in cancel order (Positions Component)');\n\n      try {\n        const data = await this.$apollo.mutate({\n          mutation: gql`mutation prepareOrderCancel($id: ID!, $partyId: String!, $marketId: String!) {\n            prepareOrderCancel(id:$id, partyId:$partyId,marketId:$marketId) {\n              blob\n            }\n          }`,\n          variables: {\n            id: order.id,\n            partyId: this.partiesId,\n            marketId: order.marketID\n          }\n        }); // console.log(data);\n        // console.log(data.data);\n        // console.log(data.data.prepareOrderCancel.blob);\n        // console.log('Cancel Order preparation successful for order with orderID ' + order.id );\n\n        let blob = data.data.prepareOrderCancel.blob;\n\n        try {\n          //SIGNING PREPARED ORDER\n          // console.log(blob);\n          const transactionSign = await VegaProtocolService.signtx(blob, true); //Propogating the transaction\n          // console.log(transactionSign);\n\n          if (transactionSign.status == 200) {\n            //IF SUCCESSFUL\n            let msg = 'Order Cancellation request for orderID: ' + order.id + ' has been successfully signed and propogated into the chain.'; // console.log(msg);    \n\n            this.$showSuccessMsg({\n              message: msg\n            });\n          } else {\n            //Else for signing order\n            let msg = 'Deletion request\\'s signature transaction failed. Please try again'; // console.log(msg);\n\n            this.$$showErrorMsg({\n              message: msg\n            });\n          }\n        } catch (err) {\n          //catch for signing order\n          let msg = ' Order signature for deletion request returned error. Please try again'; // console.log(msg);\n\n          this.$$showErrorMsg({\n            message: msg\n          });\n        }\n      } catch (error) {\n        // console.log(error);\n        let msg = ' Order deletion request preparation returned error. Please try again'; // console.log(msg);\n\n        this.$$showErrorMsg({\n          message: msg\n        });\n      }\n    }\n\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged, this.userLoginListener); //to handle change in pubKey        \n  }\n\n};",{"version":3,"sources":["Positions.vue"],"names":[],"mappings":"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","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport {VegaKeys,} from '@/utils/localStorage.js';\nimport gql from 'graphql-tag';\n\nexport default {\n  name: 'positions-mobile',\n\n  components: {\n    Spinner,\n  },\n\n  props: {\n    parentHeight: Number,\n    open: {\n      type: Boolean,\n    },\n  },\n\n  data() {\n    return {\n      positions: [],\n      markets : [],\n      subs_positions: new Map(),\n      positions_array: [],\n      isLoggedIn: false,\n      partiesId: 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN', //VegaKeys.currentActiveKey,\n      totalRealizedPNL_VUSD: 0,\n      totalUnrealizedPNL_VUSD: 0,\n      totalRealizedPNL_BTC: 0,\n      totalUnrealizedPNL_BTC: 0,\n      dropdownSelections: [],\n      dropdownMarkets: this.$store.getters.markets,\n    };\n  },\n\n  // computed: {\n  //   positions() {\n  //     return this.mapActiveOrders(this.$store.getters.positions);\n  //   },\n  // },\n\n  apollo: {\n    $subscribe: {\n      positions: {\n        query: gql`subscription name($partyId: String!) {\n                    positions (partyId: $partyId) {\n                        market {\n                          id\n                          name\n                        }\n                        openVolume\n                        realisedPNL\n                        unrealisedPNL\n                        averageEntryPrice\n                        margins{\n                          maintenanceLevel\n                          searchLevel\n                          initialLevel\n                          collateralReleaseLevel\n                        }\n                      }\n                    }`,\n\n        variables() {  return {partyId: this.partiesId,};  },\n\n        result({data,loading,}) {\n          if (loading) {\n            // console.log('loading');\n          }\n          let _positions = data.positions;\n          // // console.log(_positions);\n          this.subcribeToPositions(_positions);\n        },\n      },\n    },\n  },\n\n  mounted() {\n    this.userLoginListener = () => this.setPubKey();\n    this.userLogoutListener = () => (this.positions = []);\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);  //GET POSITIONS\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener); //GO EMPTY AGAIN\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey    \n  },\n\n  methods: {\n\n    setPubKey() {\n      // // console.log(VegaKeys.currentActiveKey);\n      this.positions_array = [];\n      this.positions = [];\n      // console.log(this.dropdownMarkets);\n      this.dropdownMarkets = [];\n      let markets = this.$store.getters.markets;\n      for (let i=0;i<markets.length;i++) {    //used for populating dropdown\n        let cur = {};\n        cur.id = markets[i].id;\n        cur.name = markets[i].data.name;\n        this.dropdownMarkets.push(cur);\n      }\n      // this.dropdownMarkets = \n      // console.log(this.dropdownMarkets);\n\n      this.markets = this.$store.getters.mappedMarketsbyName;\n      this.$store.commit('totalRealizedPNL_VUSD',0);\n      this.$store.commit('totalUnrealizedPNL_VUSD',0);  \n      this.$store.commit('totalRealizedPNL_BTC',0);\n      this.$store.commit('totalUnrealizedPNL_BTC',0);          \n      this.partiesId = VegaKeys.currentActiveKey;\n      // // console.log(this.partiesId);\n    },\n\n    subcribeToPositions(positions) {\n      // if (!this.subs_positions.has(positions.market.id)) {\n      let obj = [];\n      obj.averageEntryPrice = (Number(positions.averageEntryPrice)/100000).toFixed(5);\n      obj.openVolume = Number(positions.openVolume);\n      obj.realisedPNL = (Number(positions.realisedPNL)/100000).toFixed(5);\n      obj.unrealisedPNL = (Number(positions.unrealisedPNL)/100000).toFixed(5);\n      obj.maintenanceLevel = (Number(positions.margins[0].maintenanceLevel)/100000).toFixed(5);\n      obj.searchLevel = (Number(positions.margins[0].searchLevel)/100000).toFixed(5);\n      obj.collateralReleaseLevel = (Number(positions.margins[0].collateralReleaseLevel)/100000).toFixed(5);\n      obj.initialLevel = (Number(positions.margins[0].initialLevel)/100000).toFixed(5);\n      obj.market_name  = positions.market.name;\n      obj.marketID = positions.market.id;\n      this.subs_positions.set(String(positions.market.id),obj);\n      // // console.log(this.subs_positions);\n      this.positions_array = Array.from(this.subs_positions, ([name,value,]) => ({name,value,}) );\n      this.totalRealizedPNL_VUSD = 0;\n      this.totalUnrealizedPNL_VUSD = 0;\n      this.totalRealizedPNL_BTC = 0;\n      this.totalUnrealizedPNL_BTC = 0;\n\n      for (let i=0; i<this.positions_array.length ; i++ ) {\n        // // console.log(this.positions_array);\n        // // console.log(this.$store.getters.mappedMarketsbyName);\n        if (this.$store.getters.mappedMarketsbyName.has(this.positions_array[i].value.market_name)) {\n          // // console.log(this.markets);\n          // // console.log(this.positions_array[i].value.market_name);\n          let cur = this.$store.getters.mappedMarketsbyName.get(this.positions_array[i].value.market_name);\n          // // console.log(cur);\n          if (cur.quoteName == 'VUSD') {\n            this.totalRealizedPNL_VUSD = Number(this.totalRealizedPNL_VUSD) + Number(this.positions_array[i].value.realisedPNL);\n            this.totalUnrealizedPNL_VUSD = Number(this.totalUnrealizedPNL_VUSD) + Number(this.positions_array[i].value.unrealisedPNL);\n            this.$store.commit('totalRealizedPNL_VUSD',this.totalRealizedPNL_VUSD);\n            this.$store.commit('totalUnrealizedPNL_VUSD',this.totalUnrealizedPNL_VUSD);\n          }\n          if (cur.quoteName == 'BTC') {\n            this.totalRealizedPNL_BTC = Number(this.totalRealizedPNL_BTC) + Number(this.positions_array[i].value.realisedPNL);\n            this.totalUnrealizedPNL_BTC = Number(this.totalUnrealizedPNL_BTC) + Number(this.positions_array[i].value.unrealisedPNL);\n            this.$store.commit('totalRealizedPNL_BTC',this.totalRealizedPNL_BTC);\n            this.$store.commit('totalUnrealizedPNL_BTC',this.totalUnrealizedPNL_BTC);\n          }\n        }\n      }\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    userLogoutListener() {\n      this.positions_array = [];\n      this.positions = [];\n      this.$store.commit('totalRealizedPNL',0);\n      this.$store.commit('totalUnrealizedPNL',0);      \n    },\n\n    async closeAllPositions() {   \n      let curr_array = this.positions_array;\n      // console.log(curr_array);\n      for (let i=0;i<curr_array.length;i++) {\n        if (curr_array[i].value.openVolume != 0) {\n            let resp = await this.closePosition(curr_array[i].value);\n        }\n      }\n    },\n\n    //Closes all Positions, Cancels All Orders\n    async closeAllPositionsAndCancelAllOrders() {\n      let curr_array = this.positions_array;\n      // console.log(curr_array);\n\n      //For loop to close all Positions\n      for (let i=0;i<curr_array.length;i++) {\n        if (curr_array[i].value.openVolume != 0) {\n            let resp = await this.closePositionAndCancelOrders(curr_array[i].value);\n        }\n      }\n      this.$showSuccessMsg({message: 'All Positions have been closed' ,});                      \n      this.$showSuccessMsg({message: 'All Active Orders have been cancelled' ,});           \n    },\n\n    //CALLS .closePosition and .cancelAllOrders to close position and cancel All Orders\n    async closePositionAndCancelOrders(position) {  \n      let closePosition = await this.closePosition(position);\n      this.$showSuccessMsg({message: 'The Position for the market \\'' + position.market_name + '\\' has been closed' ,});                \n\n      let activeOrders = this.$store.getters.activeOrders;\n      // console.log(activeOrders);\n      let cancelAllOrders = await this.cancelAllOrders(position);\n    },\n\n    //Cancels all Active Orders for the selected Position's Market\n    async cancelAllOrders(position) {\n      let activeOrders = this.$store.getters.activeOrders;\n      // console.log(activeOrders);\n\n      for (let i=0;i<activeOrders.length;i++) {\n        if (position.marketID == activeOrders[i].marketID) {\n          // console.log(activeOrders[i]);\n          let cancelOrder = await this.cancelOrder(activeOrders[i]);\n        }\n      }\n      this.$showSuccessMsg({message: 'All active Orders for the market \\'' + position.market_name + '\\' have been cancelled' ,});                \n    },\n\n    //Closes the Position\n    async closePosition(position) {       //CLOSES POSITION FOR THE POSITION OBJECT PASSED\n      // console.log(';IN CLOSEPOSITION + ' + position.openVolume + '   ' + Number(position.openVolume) );\n\n      if (Number(position.openVolume) > 0) {     //If having long position\n        // console.log(';IN CLOSEPOSITION');\n        const response = await VegaProtocolService.submitOrder_market(position.marketID,position.openVolume,'Sell','MARKET','FOK'); \n        if (response.status == 200) {     //If Successful\n          this.$showSuccessMsg({message: position.market_name + ' - ' + response.message,});\n        } \n        else {                          //If failed.\n          this.$showErrorMsg({message: position.market_name + ' - ' + response.message,});\n          this.$showErrorMsg({message: 'Could\\t close position. Please try again',});\n        }\n      }\n      else if (Number(position.openVolume) < 0) {     //If having short position\n        // console.log(';IN CLOSEPOSITION');\n        const response = await VegaProtocolService.submitOrder_market(position.marketID,(Math.abs(Number(position.openVolume))).toString(),'Buy','MARKET','FOK'); \n        if (response.status == 200) {     //If Successful\n          this.$showSuccessMsg({message: position.market_name + ' - ' + response.message,});\n        } \n        else {                          //If failed.\n          this.$showErrorMsg({message: position.market_name + ' - ' + response.message,});\n          this.$showErrorMsg({message: 'Could\\t close position. Please try again',});\n        }\n      }\n      else if (Number(position.openVolume) == 0 ) {\n          this.$showErrorMsg({message: 'There are no active positions for the selected market',});\n      }\n    },\n\n    //Cancels the passed Order\n    async cancelOrder(order) {          //CANCELS THE PASSED ORDER \n      // console.log(order); \n      this.$store.commit('addLoaderTask', 1, false);\n      // console.log('in cancel order (Positions Component)');\n      try {\n        const data = await this.$apollo.mutate({\n            mutation: gql`mutation prepareOrderCancel($id: ID!, $partyId: String!, $marketId: String!) {\n            prepareOrderCancel(id:$id, partyId:$partyId,marketId:$marketId) {\n              blob\n            }\n          }`,\n          variables: { id:order.id, partyId:this.partiesId, marketId: order.marketID },\n        });\n      \n        // console.log(data);\n        // console.log(data.data);\n        // console.log(data.data.prepareOrderCancel.blob);\n        // console.log('Cancel Order preparation successful for order with orderID ' + order.id );\n        let blob = data.data.prepareOrderCancel.blob;\n\n        try{                      //SIGNING PREPARED ORDER\n            // console.log(blob);\n            const transactionSign = await VegaProtocolService.signtx(blob,true);  //Propogating the transaction\n            // console.log(transactionSign);\n            if (transactionSign.status == 200) {    //IF SUCCESSFUL\n              let msg = 'Order Cancellation request for orderID: ' + order.id + ' has been successfully signed and propogated into the chain.';\n              // console.log(msg);    \n              this.$showSuccessMsg({message: msg,});                \n            }\n            else {      //Else for signing order\n              let msg = 'Deletion request\\'s signature transaction failed. Please try again';\n              // console.log(msg);\n              this.$$showErrorMsg({message: msg});                \n           }\n        }\n        catch (err) {  //catch for signing order\n          let msg = ' Order signature for deletion request returned error. Please try again';\n          // console.log(msg);\n          this.$$showErrorMsg({message: msg});                \n        }\n      }\n      catch(error) {\n        // console.log(error);\n        let msg = ' Order deletion request preparation returned error. Please try again';\n        // console.log(msg);\n        this.$$showErrorMsg({message: msg});                        \n      } \n    }\n\n\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./style.scss\" scoped></style>\n\n"],"sourceRoot":"src/components/PositionsMobile"}]}