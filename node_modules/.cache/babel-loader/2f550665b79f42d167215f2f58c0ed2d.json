{"remainingRequest":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js!/Users/chrismoores/Downloads/cryptowhaler/node_modules/eslint-loader/index.js??ref--13-0!/Users/chrismoores/Downloads/cryptowhaler/src/services/VegaProtocolService.js","dependencies":[{"path":"/Users/chrismoores/Downloads/cryptowhaler/src/services/VegaProtocolService.js","mtime":1595121760000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { VegaKeys } from '@/utils/localStorage.js';\nimport axios from 'axios';\n\nclass VegaProtocolService {\n  constructor() {\n    this.main_api = 'https://lb.n.vega.xyz';\n    this.currentActiveKey = VegaKeys.currentActiveKey; // const token = VegaKeys.token; \n\n    this.unspecified = 'unspecified';\n  } //    Preparesponsethe submit order. Returns blob which is decoded and used for signing transaction\n  // {\n  //     \"blob\": \"string\",\n  //     \"submitID\": \"string\"\n  //     }\n\n\n  async submitOrder_market(marketid, size, side, type, timeinforce) {\n    const msg_ = side + ' ' + type + ' ' + timeinforce + ' order of ' + size + ' ' + ' at ';\n\n    try {\n      //PREPARING ORDER\n      // marketid,size,type,side = this.unspecified,timeinforce = this.unspecified,price=''\n      // console.log(side + ' ' + size+ ' ' +marketid+ ' ' +type+ ' ' +timeinforce);\n      const preparingOrder = await this.prepare_submit_order_market(marketid, size, type, side, timeinforce); // console.log(preparingOrder);\n\n      if (preparingOrder.status == 200) {\n        let msg = msg_ + ' has been successfully prepared.'; // console.log(msg);\n\n        const blob = preparingOrder.data.blob;\n\n        try {\n          //SIGNING PREPARED ORDER\n          // console.log(blob);\n          const transactionSign = await this.signtx(blob, true); //Propogating the transaction\n          // console.log(transactionSign);\n\n          if (transactionSign.status == 200) {\n            let msg = msg_ + ' has been successfully signed and propogated into the chain.'; // console.log(msg);    \n\n            return {\n              status: transactionSign.status,\n              message: msg\n            }; // let transSignRes = transactionSign.data.signedTx;\n            // let sig = transSignRes.sig;\n            // let pub = transSignRes.pubKey;\n            // // let pubPrep = base64.b64encode(binascii.unhexlify(pub)).decode(\"ascii\");\n            // try {        //SUBMITTING ORDER    \n            //   let transSubRes = await this.submit_transaction(blob,sig,pub);\n            //   if (transSubRes.status == 200) {\n            //     let msg = msg_ + ' has been successfully submitted';\n            //     // console.log(msg);\n            //     return {status:transSubRes.status, message:msg,};\n            //   }\n            //   else {    //Else for submitting order\n            //     let msg = msg_ + ' - Order submission failed';\n            //     // console.log(msg);\n            //     return {status:transSubRes.status, message:msg,};\n            //   }\n            // }\n            // catch (err) {//catch for submitting order\n            //   let msg = msg_ + ' - Order submission returned error. Please check order details again.';\n            //   // console.log(msg);\n            //   return {status:404, message:msg,};\n            // }\n          } else {\n            //Else for signing order\n            let msg = msg_ + ' - Order signature failed'; // console.log(msg);\n\n            return {\n              status: transactionSign.status,\n              message: msg\n            };\n          }\n        } catch (err) {\n          //catch for signing order\n          let msg = msg_ + ' - Order signature returned error. Please check order details again.'; // console.log(msg);\n\n          return {\n            status: 404,\n            message: msg\n          };\n        }\n      } else {\n        //Else for preparing order\n        let msg = msg_ + ' - Order preparation failed'; // console.log(msg);\n\n        return {\n          status: preparingOrder.status,\n          message: msg\n        };\n      }\n    } catch (err) {\n      let msg = msg_ + ' - Order preparation returned error. Please check order details again.'; // console.log(msg);\n\n      return {\n        status: 404,\n        message: this.msg\n      };\n    }\n  }\n\n  async submitOrder_limit(marketid, size, side, type, timeinforce, price, currency = 'USD') {\n    const msg_ = side + ' ' + type + ' ' + timeinforce + ' order of volume ' + size + ' ' + ' at value ' + price + ' ' + currency;\n\n    try {\n      //PREPARING ORDER\n      // marketid,size,type,side = this.unspecified,timeinforce = this.unspecified,price=''\n      // console.log(side + ' ' + size+ ' ' +marketid+ ' ' +type+ ' ' +timeinforce + price);\n      const preparingOrder = await this.prepare_submit_order_limit(marketid, size, type, side, timeinforce, price); // console.log(preparingOrder);\n\n      if (preparingOrder.status == 200) {\n        let msg = msg_ + ' has been successfully prepared.'; // console.log(msg);\n\n        const blob = preparingOrder.data.blob;\n\n        try {\n          //SIGNING PREPARED ORDER\n          const transactionSign = await this.signtx(blob, true); //Propogating the transaction\n\n          if (transactionSign.status == 200) {\n            let msg = msg_ + ' has been successfully signed and propogated into the chain.'; // console.log(msg);    \n\n            return {\n              status: transactionSign.status,\n              message: msg\n            }; // let transSignRes = transactionSign.data.signedTx;\n            // let sig = transSignRes.sig;\n            // let pub = transSignRes.pubKey;\n            // // let pubPrep = base64.b64encode(binascii.unhexlify(pub)).decode(\"ascii\");\n            // try {        //SUBMITTING ORDER    \n            //   let transSubRes = await this.submit_transaction(blob,sig,pub);\n            //   if (transSubRes.status == 200) {\n            //     let msg = msg_ + ' has been successfully submitted';\n            //     // console.log(msg);\n            //     return {status:transSubRes.status, message:msg,};\n            //   }\n            //   else {    //Else for submitting order\n            //     let msg = msg_ + ' - Order submission failed';\n            //     // console.log(msg);\n            //     return {status:transSubRes.status, message:msg,};\n            //   }\n            // }\n            // catch (err) {//catch for submitting order\n            //   let msg = msg_ + ' - Order submission returned error. Please check order details again.';\n            //   // console.log(msg);\n            //   return {status:404, message:msg,};\n            // }\n          } else {\n            //Else for signing order\n            let msg = msg_ + ' - Order signature failed'; // console.log(msg);\n\n            return {\n              status: transactionSign.status,\n              message: msg\n            };\n          }\n        } catch (err) {\n          //catch for signing order\n          let msg = msg_ + ' - Order signature returned error. Please check order details again.'; // console.log(msg);\n\n          return {\n            status: 404,\n            message: msg\n          };\n        }\n      } else {\n        //Else for preparing order\n        let msg = msg_ + ' - Order preparation failed'; // console.log(msg);\n\n        return {\n          status: preparingOrder.status,\n          message: msg\n        };\n      }\n    } catch (err) {\n      let msg = msg_ + ' - Order preparation returned error. Please check order details again.'; // console.log(msg);\n\n      return {\n        status: 404,\n        message: msg\n      };\n    }\n  }\n\n  async prepare_submit_order_market(marketid, size, type, side, timeinforce) {\n    // console.log('PREPARING ORDER');\n    // console.log(VegaKeys.currentActiveKey);\n    // console.log(this.currentActiveKey);\n    const responsebody = {\n      'submission': {\n        'marketID': marketid,\n        'partyID': VegaKeys.currentActiveKey,\n        'side': side,\n        'size': size,\n        'timeInForce': timeinforce,\n        'type': type\n      }\n    }; // console.log(responsebody);\n\n    try {\n      let response = await axios.post(this.main_api + '/orders/prepare', responsebody); // console.log(response);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {\n      // console.log('prepare_submit_order_market Failed.');\n      return {\n        status: 404,\n        data: 'prepare_submit_order_market Failed.'\n      };\n    }\n  }\n\n  async prepare_submit_order_limit(marketid, size, type, side, timeinforce, price) {\n    // console.log('PREPARING ORDER');\n    // console.log(VegaKeys.currentActiveKey);\n    const responsebody = {\n      'submission': {\n        'marketID': marketid,\n        'partyID': VegaKeys.currentActiveKey,\n        'price': price,\n        'side': side,\n        'size': size,\n        'timeInForce': timeinforce,\n        'type': type\n      }\n    }; // console.log(responsebody);\n\n    try {\n      let response = await axios.post(this.main_api + '/orders/prepare', responsebody); // console.log(response);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {\n      // console.log('prepare_submit_order_limit Failed.');\n      return {\n        status: 404,\n        data: 'prepare_submit_order_limit Failed.'\n      };\n    }\n  } //    Signs the transaction\n  // {\n  //     \"signedTx\": {\n  //       \"data\": \"dGVzdGRhdGEK\",\n  //       \"sig\": \"...\",\n  //       \"pubKey\": \"1122aabb...\"\n  //     }\n  //   }    \n\n\n  async signtx(blob, propagate = false) {\n    let sign_api = 'https://wallet.n.vega.xyz/api/v1/messages'; // console.log(VegaKeys.currentActiveKey);\n    // console.log(this.currentActiveKey);\n\n    const _header = 'Bearer ' + VegaKeys.token; // console.log(blob);\n    // console.log('Header ' + _header );\n\n\n    const data_ = {\n      'tx': blob,\n      'pubKey': VegaKeys.currentActiveKey,\n      'propagate': propagate\n    }; // console.log(data_);\n\n    try {\n      let response = await axios.post(sign_api, data_, {\n        headers: {\n          Authorization: _header\n        }\n      }); // console.log(response);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {\n      // console.log('Sign_Transaction Failed.');\n      return {\n        status: 404,\n        data: 'Sign_Transaction Failed.'\n      };\n    }\n  } // #submits the transaction\n  // {\n  //     \"success\": true\n  //     }\n\n\n  async submit_transaction(data, sig) {\n    let responsebody = {\n      'tx': {\n        'data': data,\n        'pubKey': this.currentActiveKey,\n        'sig': sig\n      }\n    }; // console.log(responsebody);    \n\n    try {\n      let response = await axios.post(this.main_api + '/transaction', responsebody); // console.log(response);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Submit_transaction Failed.');\n    }\n  } // cancels the order\n  // {\n  //     \"blob\": \"string\"\n  //     }\n\n\n  async cancel_order(markid, orderid) {\n    let url = 'https://lb.n.vega.xyz/orders/prepare/' + orderid;\n    let responsebody = {\n      'marketID': markid,\n      'partyID': VegaKeys.currentActiveKey\n    };\n    let headers = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n    }; // console.log(responsebody);\n    // console.log(url);\n\n    try {\n      let preparingOrder = await axios.delete(url, {\n        params: responsebody\n      }, {\n        crossdomain: true\n      }); // console.log(response);\n\n      if (preparingOrder.status == 200) {\n        let msg_ = ' Deletion request has been successfully prepared.'; // console.log(msg);\n\n        const blob = preparingOrder.data.blob;\n\n        try {\n          //SIGNING PREPARED ORDER\n          // console.log(blob);\n          const transactionSign = await this.signtx(blob, true); //Propogating the transaction\n          // console.log(transactionSign);\n\n          if (transactionSign.status == 200) {\n            //IF SUCCESSFUL\n            let msg = 'Deletion request has been successfully signed and propogated into the chain.'; // console.log(msg);    \n\n            return {\n              status: transactionSign.status,\n              message: msg\n            };\n          } else {\n            //Else for signing order\n            let msg = 'Deletion request\\'s signature transaction failed'; // console.log(msg);\n\n            return {\n              status: transactionSign.status,\n              message: msg\n            };\n          }\n        } catch (err) {\n          //catch for signing order\n          let msg = ' Order signature for deletion request returned error'; // console.log(msg);\n\n          return {\n            status: 404,\n            message: msg\n          };\n        }\n      } else {\n        let msg = 'Deletion Order preparation failed'; // console.log(msg);\n\n        return {\n          status: preparingOrder.status,\n          message: msg\n        };\n      }\n    } catch {\n      // console.log('Cancel Order preparation Failed.');\n      return {\n        status: 404,\n        message: 'Cancel Order preparation Failed.'\n      };\n    }\n  } // cancels the order\n  // {\n  //     \"blob\": \"string\"\n  //     }\n\n\n  async amend_order(markid, orderid) {\n    let responsebody = {\n      'marketID': markid,\n      'orderID': orderid,\n      'partyID': this.currentActiveKey\n    };\n\n    try {\n      let response = await axios.delete(this.main_api + '/orders/prepare' + orderid, responsebody);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Amend Order Failed.');\n    }\n  } // GETS THE DATA OF ALL THE MARKETS\n  //     {\n  //   'markets': [\n  //     {           # Example of 1 market, a list of these objects is returned\n  //       'id': 'LBXRA65PN4FN5HBWRI2YBCOYDG2PBGYU',\n  //       'name': 'GBPVUSD/OCT20',\n  //       'tradableInstrument': {\n  //         'instrument': {\n  //           'id': 'Crypto/GBPVUSD/Futures/Oct20',\n  //           'code': 'CRYPTO:GBPVUSD/OCT20',\n  //           'name': 'October 2020 GBP vs VUSD future',\n  //           'baseName': 'GBP',\n  //           'quoteName': 'VUSD',\n  //           'responsebody': {\n  //             'tags': [\n  //               'asset_class:fx/crypto',\n  //               'product:futures'\n  //             ]\n  //           },\n  //           'initialMarkPrice': '130000',\n  //           'future': {\n  //             'maturity': '2020-10-30T22:59:59Z',\n  //             'asset': 'VUSD',\n  //             'ethereumEvent': {\n  //               'contractID': '0x0B484706fdAF3A4F24b2266446B1cb6d648E3cC1',\n  //               'event': 'price_changed',\n  //               'value': '126000'\n  //             }\n  //           }\n  //         },                  #instrument bracket close\n  //         'marginCalculator': {\n  //           'scalingFactors': {\n  //             'searchLevel': 1.1,\n  //             'initialMargin': 1.2,\n  //             'collateralRelease': 1.4\n  //           }\n  //         },\n  //         'logNormalRiskModel': {\n  //           'riskAversionParameter': 0.01,\n  //           'tau': 0.00011407711613050422,\n  //           'params': {\n  //             'mu': 0,\n  //             'r': 0.016,\n  //             'sigma': 0.09\n  //             }\n  //         }\n  //       },                #tradable instrument bracket close\n  //       'decimalPlaces': '5',\n  //       'continuous': {\n  //         'tickSize': '0'\n  //       }\n  //     },\n  //     }\n\n\n  async get_markets() {\n    try {\n      let response = await axios.get(this.main_api + '/markets'); // console.log(response);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {\n      // console.log('Get Markets Failed.');\n      return {\n        status: 404,\n        data: 'Get Markets Failed'\n      };\n    }\n  } // Gets List of markets Data\n  //     {'marketsData': [{'markPrice': '23135052', 'bestBidPrice': '23101998', 'bestBidVolume': '183', 'bestOfferPrice': '23135052', 'bestOfferVolume': '125', 'midPrice': '23118525', 'market': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67', 'timestamp': '1593645095537541796'},\n  //                     {'markPrice': '123826', 'bestBidPrice': '123825', 'bestBidVolume': '18716', 'bestOfferPrice': '123826', 'bestOfferVolume': '6901', 'midPrice': '123825', 'market': 'LBXRA65PN4FN5HBWRI2YBCOYDG2PBGYU', 'timestamp': '1593645095537541796'},\n  //                     {'markPrice': '2500', 'bestBidPrice': '2500', 'bestBidVolume': '515', 'bestOfferPrice': '2501', 'bestOfferVolume': '28', 'midPrice': '2500', 'market': 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN', 'timestamp': '1593645095537541796'}]}\n\n\n  async get_list_of_markets() {\n    try {\n      let response = await axios.get(this.main_api + '/markets-data');\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get list of Markets Failed.');\n    }\n  } //     {'marketData': {'markPrice': '23138017', 'bestBidPrice': '23101998', 'bestBidVolume': '183', 'bestOfferPrice': '23138017', 'bestOfferVolume': '488', 'midPrice': '23120007', 'market': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67', 'timestamp': '1593645237475712568'}}\n\n\n  async get_market_data_by_id(id) {\n    try {\n      let response = await axios.get(this.main_api + '/markets-data/' + id);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get Market Data by ID Failed.');\n    }\n  } //     {'market':\n  //         {'id': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //         'name': 'ETHVUSD/DEC20',\n  //         'tradableInstrument': {\n  //             'instrument': {\n  //                     'id': 'Crypto/ETHVUSD/Futures/Dec20',\n  //                     'code': 'CRYPTO:ETHVUSD/DEC20',\n  //                     'name': 'December 2020 ETH vs VUSD future',\n  //                     'baseName': 'ETH',\n  //                     'quoteName': 'VUSD',\n  //                     'responsebody': {'tags': ['asset_class:fx/crypto', 'product:futures']},\n  //                     'initialMarkPrice': '1410000',\n  //                     'future': {\n  //                         'maturity': '2020-12-31T23:59:59Z',\n  //                         'asset': 'VUSD',\n  //                         'ethereumEvent': {'contractID': '0x0B484706fdAF3A4F24b2266446B1cb6d648E3cC1', 'event': 'price_changed', 'value': '1500000'}\n  //                     }\n  //             },\n  //             'marginCalculator': {'scalingFactors': {'searchLevel': 1.1, 'initialMargin': 1.2, 'collateralRelease': 1.4}},\n  //             'logNormalRiskModel': {'riskAversionParameter': 0.001, 'tau': 0.00011407711613050422, 'params': {'mu': 0, 'r': 0.016, 'sigma': 1.5}}\n  //         },\n  //         'decimalPlaces': '5',\n  //         'continuous': {'tickSize': '0'}\n  //         }\n  //     }    WORKS\n\n\n  async get_market_by_id(id) {\n    let url = this.main_api + '/markets/' + id;\n\n    try {\n      let response = await axios.get(url);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get market by id Failed.');\n    }\n  }\n\n  async get_accounts_by_market(id, asset) {\n    let responsebody = {\n      'asset': asset\n    };\n\n    try {\n      let response = await axios.get(this.main_api + '/markets/' + id + '/accounts', responsebody);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get accounts by market Failed.');\n    }\n  } // #NOT WORKING\n\n\n  async get_candles_by_market_id(id, timestamp, intervals) {\n    let async_url = '/markets/' + id + '/candles';\n    let responsebody = {\n      'sinceTimestamp': timestamp,\n      'interval': intervals\n    }; // console.log(async_url + '   ' + responsebody);\n\n    try {\n      let response = await axios.get(this.main_api + async_url, {\n        params: responsebody\n      }); // console.log(response);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {\n      // console.log('Get candles by market Failed.');\n      return {\n        status: 404,\n        data: 'API call failed'\n      };\n    }\n  }\n\n  async get_market_depth(id, depth) {\n    let responsebody = {\n      'maxDepth': depth\n    };\n\n    try {\n      let response = await axios.get(this.main_api + '/markets/' + id + '/depth', responsebody);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get market depth Failed.');\n    }\n  }\n\n  async get_orders_by_market(id, skip, limit, desc, open) {\n    let responsebody = {\n      'pagination.skip': skip,\n      'pagination.limit': limit,\n      'pagination.descending': desc,\n      'open': open\n    };\n\n    try {\n      let response = await axios.get(this.main_api + '/markets/' + id + '/orders', responsebody);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get orders by market Failed.');\n    }\n  }\n\n  async get_order_by_market_orderid(markid, orderid) {\n    let path = '/markets/' + markid + '/orders/' + orderid;\n\n    try {\n      let response = await axios.get(this.main_api + path);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get orders by markt orderID Failed.');\n    }\n  }\n\n  async get_trades_by_market(markid, skip, limit, desc = true) {\n    let path = '/markets/' + markid + '/trades';\n    let responsebody = {\n      'pagination.skip': skip,\n      'pagination.limit': limit,\n      'pagination.descending': desc\n    };\n\n    try {\n      let response = await axios.get(this.main_api + path, responsebody);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get trades by market Failed.');\n    }\n  } // #TESTED.WORKED.\n  //     '''{\n  //           'trade': {\n  //             'id': 'V0001020492-0047497446-0000000001',\n  //             'marketID': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //             'price': '23163983',\n  //             'size': '9',\n  //             'buyer': '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n  //             'seller': '65a3231465ffaf4f4182c57d7f7f2f7b1394934be462ed2c8b6cdedad67fbb08',\n  //             'aggressor': 'Sell',\n  //             'buyOrder': 'V0001020304-0047488412',\n  //             'sellOrder': 'V0001020492-0047497446',\n  //             'timestamp': '1593646061008593739',\n  //             'type': 'DEFAULT'\n  //           }\n  //         }\n\n\n  async get_latest_trade(markid) {\n    let path = '/markets/' + markid + '/trades/latest';\n\n    try {\n      let response = await axios.get(this.main_api + path);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get latest trade Failed.');\n    }\n  } // #TESTED.WORKED\n  //     {\n  //       'trades': [\n  //         {\n  //           'id': 'V0001020492-0047497446-0000000001',\n  //           'marketID': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //           'price': '23163983',\n  //           'size': '9',\n  //           'buyer': '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n  //           'seller': '65a3231465ffaf4f4182c57d7f7f2f7b1394934be462ed2c8b6cdedad67fbb08',\n  //           'aggressor': 'Sell',\n  //           'buyOrder': 'V0001020304-0047488412',\n  //           'sellOrder': 'V0001020492-0047497446',\n  //           'timestamp': '1593646061008593739',\n  //           'type': 'asyncAULT'\n  //         },\n  //         {\n  //           'id': 'V0001020493-0047497456-0000000000',\n  //           'marketID': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //           'price': '23163983',\n  //           'size': '11',\n  //           'buyer': '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n  //           'seller': '131170bfd28a095ebbd43173e8c8aafcb657a3406352f4be663efc26df335702',\n  //           'aggressor': 'Sell',\n  //           'buyOrder': 'V0001020304-0047488412',\n  //           'sellOrder': 'V0001020493-0047497456',\n  //           'timestamp': '1593646061782132046',\n  //           'type': 'asyncAULT'\n  //         },\n  //         {\n  //           'id': 'V0001020493-0047497457-0000000000',\n  //           'marketID': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //           'price': '23163983',\n  //           'size': '43',\n  //           'buyer': '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n  //           'seller': '352e0c5bd28845ab8934d8ed0263a9d8a2fd08690c09a301668a6ae2263f4160',\n  //           'aggressor': 'Sell',\n  //           'buyOrder': 'V0001020304-0047488412',\n  //           'sellOrder': 'V0001020493-0047497457',\n  //           'timestamp': '1593646061782132046',\n  //           'type': 'asyncAULT'\n  //         }\n  //       ]\n  //     }\n\n\n  async get_trades_by_orderid(orderid) {\n    let path = '/orders/' + orderid + '/trades';\n\n    try {\n      let response = await axios.get(this.main_api + path);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get trades by orderID Failed.');\n    }\n  }\n\n  async get_allorders_by_orderid(orderid, skip, limit, desc = true) {\n    let path = '/orders/' + orderid + '/versions';\n    let responsebody = {\n      'pagination.skip': skip,\n      'pagination.limit': limit,\n      'pagination.descending': desc\n    };\n\n    try {\n      let response = await axios.get(this.main_api + path, responsebody);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get all orders by orderID Failed.');\n    }\n  }\n\n  async get_order_by_pendingorderref(order_ref) {\n    let path = '/orders/' + order_ref;\n\n    try {\n      let response = await axios.get(this.main_api + path);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get orders by pending orders REF. Failed.');\n    }\n  } // #TESTED.WORKED\n  // {\n  //   'parties': [\n  //     {'id': 'b030b62f6d8bab518a44400faa2877e9e78af48c08144e40b64f5781c1c3f817'},\n  //     {'id': 'eb0f9067909eb39474a79b8605ff904a52272a0a9b4019219f02709f6a76f62b'},\n  //     {'id': '807938340e39af0bc1b3a1c668ad0a85c498864d8ec4e8bb3ca2cf04026eea0e'},.....(a long list)\n  //    ]\n  // }\n\n\n  async get_parties() {\n    try {\n      let response = await axios.get(this.main_api + '/parties');\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get parties Failed.');\n    }\n  } // #TESTED.WORKED.\n  //     {'party': {'id': 'b030b62f6d8bab518a44400faa2877e9e78af48c08144e40b64f5781c1c3f817'}}\n\n\n  async get_party_by_id(p_id) {\n    try {\n      let response = await axios.get(this.main_api + '/parties/' + p_id);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get parties by ID Failed.');\n    }\n  }\n\n  async get_accounts_by_party(partyid, markid, type, asset) {\n    let path = '/parties/' + partyid + '/accounts';\n    let responsebody = {\n      'marketID': markid,\n      'type': type,\n      'asset': asset\n    };\n\n    try {\n      let response = await axios.get(this.main_api + path, responsebody);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get accounts by party Failed.');\n    }\n  }\n\n  async get_margin_levels_by_party(partyid, marketid) {\n    let path = '/parties/' + partyid + '/markets/' + marketid + '/margin';\n\n    try {\n      let response = await axios.get(this.main_api + path);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get margin levels by party Failed.');\n    }\n  } //WORKING\n\n\n  async get_orders_by_party(partyid, skip = 0, limit = 20, desc = true, open_ = true) {\n    let path = '/parties/' + partyid + '/orders';\n    let responsebody = {\n      'pagination.skip': skip,\n      'pagination.limit': limit,\n      'pagination.descending': desc,\n      'open': open_\n    };\n\n    try {\n      let response = await axios.get(this.main_api + path, {\n        params: responsebody\n      }); // console.log(response);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {\n      // console.log('Get orders by party Failed.');\n      return {\n        status: 404,\n        data: 'Get orders by party Failed.'\n      };\n    }\n  } //WORKS\n\n\n  async get_all_positions() {\n    let partyid = VegaKeys.pubKeys[0];\n    let path = '/parties/' + partyid + '/positions';\n\n    try {\n      let response = await axios.get(this.main_api + path); // console.log(response);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {\n      // console.log('Get positions by party Failed.');\n      return {\n        status: 404,\n        data: 'Get positions by party Failed'\n      };\n    }\n  }\n\n  async get_positions_by_party_and_market(partyid, markid) {\n    let path = '/parties/' + partyid + '/positions';\n    let responsebody = {\n      'marketID': markid\n    };\n\n    try {\n      let response = await axios.get(this.main_api + path, responsebody);\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get positions by party Failed.');\n    }\n  }\n\n  async get_trades_by_party(partyid, markid = '', skip = 0, limit = 20, desc = true) {\n    let path = '/parties/' + partyid + '/trades';\n    let responsebody = {\n      'marketID': markid,\n      'pagination.skip': skip,\n      'pagination.limit': limit,\n      'pagination.descending': desc\n    };\n\n    try {\n      let response = await axios.get(this.main_api + path, {\n        params: responsebody\n      }); // console.log(response);\n      // console.log(response.data);\n\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {\n      // console.log('Get trades by party Failed.');\n      return {\n        status: 404,\n        data: 'Get trades by party Failed'\n      };\n    }\n  } // #TESTED.WORKED\n  //     {'blockHeight': '1022093', 'backlogLength': '117', 'totalPeers': '5', 'genesisTime': '2020-06-22T11:00:22Z',\n  //       'currentTime': '2020-07-01T23:49:07.031235683Z', 'vegaTime': '2020-07-01T23:49:05.267949357Z', 'status': 'CONNECTED',\n  //       'txPerBlock': '48', 'averageTxBytes': '298', 'averageOrdersPerBlock': '46', 'tradesPerSecond': '41', 'ordersPerSecond': '53',\n  //       'totalMarkets': '3', 'totalAmendOrder': '0', 'totalCancelOrder': '20', 'totalCreateOrder': '47574360', 'totalOrders': '47574360',\n  //       'totalTrades': '32277295', 'orderSubscriptions': 0, 'tradeSubscriptions': 0, 'candleSubscriptions': 0,\n  //       'marketDepthSubscriptions': 0, 'positionsSubscriptions': 0, 'accountSubscriptions': 0, 'marketDataSubscriptions': 0,\n  //       'appVersionHash': 'cc332c27', 'appVersion': 'v0.19.0', 'chainVersion': '0.32.9', 'blockDuration': '905499456',\n  //       'uptime': '2020-06-22T11:17:11.200760432Z'}\n\n\n  async get_Statistics() {\n    try {\n      let response = await axios.get(this.main_api + '/statistics');\n      return {\n        status: response.status,\n        data: response.data\n      };\n    } catch {// console.log('Get Statistics Failed.');\n    }\n  }\n\n}\n\nexport default new VegaProtocolService();",{"version":3,"sources":["/Users/chrismoores/Downloads/cryptowhaler/src/services/VegaProtocolService.js"],"names":["VegaKeys","axios","VegaProtocolService","constructor","main_api","currentActiveKey","unspecified","submitOrder_market","marketid","size","side","type","timeinforce","msg_","preparingOrder","prepare_submit_order_market","status","msg","blob","data","transactionSign","signtx","message","err","submitOrder_limit","price","currency","prepare_submit_order_limit","responsebody","response","post","propagate","sign_api","_header","token","data_","headers","Authorization","submit_transaction","sig","cancel_order","markid","orderid","url","delete","params","crossdomain","amend_order","get_markets","get","get_list_of_markets","get_market_data_by_id","id","get_market_by_id","get_accounts_by_market","asset","get_candles_by_market_id","timestamp","intervals","async_url","get_market_depth","depth","get_orders_by_market","skip","limit","desc","open","get_order_by_market_orderid","path","get_trades_by_market","get_latest_trade","get_trades_by_orderid","get_allorders_by_orderid","get_order_by_pendingorderref","order_ref","get_parties","get_party_by_id","p_id","get_accounts_by_party","partyid","get_margin_levels_by_party","get_orders_by_party","open_","get_all_positions","pubKeys","get_positions_by_party_and_market","get_trades_by_party","get_Statistics"],"mappings":"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","sourcesContent":["import { VegaKeys,} from '@/utils/localStorage.js';\nimport axios from 'axios';\n\nclass VegaProtocolService {\n\n  constructor() {\n    this.main_api = 'https://lb.n.vega.xyz';\n    this.currentActiveKey = VegaKeys.currentActiveKey;\n    // const token = VegaKeys.token; \n    this.unspecified = 'unspecified';\n  }\n    \n    \n  //    Preparesponsethe submit order. Returns blob which is decoded and used for signing transaction\n  // {\n  //     \"blob\": \"string\",\n  //     \"submitID\": \"string\"\n  //     }\n\n  async submitOrder_market(marketid,size,side,type,timeinforce) {\n    const msg_ = side + ' ' + type + ' ' + timeinforce  + ' order of ' + size + ' ' + ' at ';\n    try {                 //PREPARING ORDER\n      // marketid,size,type,side = this.unspecified,timeinforce = this.unspecified,price=''\n      // console.log(side + ' ' + size+ ' ' +marketid+ ' ' +type+ ' ' +timeinforce);\n      const preparingOrder = await this.prepare_submit_order_market(marketid,size,type,side,timeinforce); \n      // console.log(preparingOrder);\n      if (preparingOrder.status == 200) {\n        let msg = msg_ + ' has been successfully prepared.';\n        // console.log(msg);\n        const blob = preparingOrder.data.blob;\n\n        try {           //SIGNING PREPARED ORDER\n          // console.log(blob);\n          const transactionSign = await this.signtx(blob,true);  //Propogating the transaction\n          // console.log(transactionSign);\n          if (transactionSign.status == 200) {\n            let msg = msg_ + ' has been successfully signed and propogated into the chain.';\n            // console.log(msg);    \n            return {status:transactionSign.status, message:msg,};\n            // let transSignRes = transactionSign.data.signedTx;\n            // let sig = transSignRes.sig;\n            // let pub = transSignRes.pubKey;\n            // // let pubPrep = base64.b64encode(binascii.unhexlify(pub)).decode(\"ascii\");\n\n            // try {        //SUBMITTING ORDER    \n            //   let transSubRes = await this.submit_transaction(blob,sig,pub);\n            //   if (transSubRes.status == 200) {\n            //     let msg = msg_ + ' has been successfully submitted';\n            //     // console.log(msg);\n            //     return {status:transSubRes.status, message:msg,};\n            //   }\n            //   else {    //Else for submitting order\n            //     let msg = msg_ + ' - Order submission failed';\n            //     // console.log(msg);\n            //     return {status:transSubRes.status, message:msg,};\n            //   }\n            // }\n            // catch (err) {//catch for submitting order\n            //   let msg = msg_ + ' - Order submission returned error. Please check order details again.';\n            //   // console.log(msg);\n            //   return {status:404, message:msg,};\n            // }\n          }\n\n          else {//Else for signing order\n            let msg = msg_ + ' - Order signature failed';\n            // console.log(msg);\n            return {status:transactionSign.status, message:msg,};\n          }\n        }\n        catch (err) {  //catch for signing order\n          let msg = msg_ + ' - Order signature returned error. Please check order details again.';\n          // console.log(msg);\n          return {status:404, message:msg,};\n        } \n      }\n      else {  //Else for preparing order\n        let msg = msg_ + ' - Order preparation failed';\n        // console.log(msg);\n        return {status:preparingOrder.status, message:msg,};\n      } \n    }\n    catch (err) {\n      let msg = msg_ + ' - Order preparation returned error. Please check order details again.';\n      // console.log(msg);\n      return {status:404, message:this.msg,};\n    } \n  }\n\n  async submitOrder_limit(marketid,size,side,type,timeinforce,price,currency = 'USD') {\n    const msg_ = side + ' ' + type + ' ' + timeinforce  + ' order of volume ' + size + ' ' + ' at value ' + price + ' ' + currency;\n    try {                 //PREPARING ORDER\n      // marketid,size,type,side = this.unspecified,timeinforce = this.unspecified,price=''\n      // console.log(side + ' ' + size+ ' ' +marketid+ ' ' +type+ ' ' +timeinforce + price);\n      const preparingOrder = await this.prepare_submit_order_limit(marketid,size,type,side,timeinforce,price); \n      // console.log(preparingOrder);\n      if (preparingOrder.status == 200) {\n        let msg = msg_ + ' has been successfully prepared.';\n        // console.log(msg);\n        const blob = preparingOrder.data.blob;\n\n        try {           //SIGNING PREPARED ORDER\n          const transactionSign = await this.signtx(blob,true);   //Propogating the transaction\n\n          if (transactionSign.status == 200) {\n            let msg = msg_ + ' has been successfully signed and propogated into the chain.';\n            // console.log(msg);    \n            return {status:transactionSign.status, message:msg,};\n            // let transSignRes = transactionSign.data.signedTx;\n            // let sig = transSignRes.sig;\n            // let pub = transSignRes.pubKey;\n            // // let pubPrep = base64.b64encode(binascii.unhexlify(pub)).decode(\"ascii\");\n\n            // try {        //SUBMITTING ORDER    \n            //   let transSubRes = await this.submit_transaction(blob,sig,pub);\n            //   if (transSubRes.status == 200) {\n            //     let msg = msg_ + ' has been successfully submitted';\n            //     // console.log(msg);\n            //     return {status:transSubRes.status, message:msg,};\n            //   }\n            //   else {    //Else for submitting order\n            //     let msg = msg_ + ' - Order submission failed';\n            //     // console.log(msg);\n            //     return {status:transSubRes.status, message:msg,};\n            //   }\n            // }\n            // catch (err) {//catch for submitting order\n            //   let msg = msg_ + ' - Order submission returned error. Please check order details again.';\n            //   // console.log(msg);\n            //   return {status:404, message:msg,};\n            // }\n          }\n\n          else {//Else for signing order\n            let msg = msg_ + ' - Order signature failed';\n            // console.log(msg);\n            return {status:transactionSign.status, message:msg,};\n          }\n        }\n        catch (err) {  //catch for signing order\n          let msg = msg_ + ' - Order signature returned error. Please check order details again.';\n          // console.log(msg);\n          return {status:404, message:msg,};\n        } \n      }\n      else {  //Else for preparing order\n        let msg = msg_ + ' - Order preparation failed';\n        // console.log(msg);\n        return {status:preparingOrder.status, message:msg,};\n      } \n    }\n    catch (err) {\n      let msg = msg_ + ' - Order preparation returned error. Please check order details again.';\n      // console.log(msg);\n      return {status:404, message:msg,};\n    } \n  }  \n\n  async prepare_submit_order_market(marketid,size,type,side,timeinforce) {\n    // console.log('PREPARING ORDER');\n    // console.log(VegaKeys.currentActiveKey);\n    // console.log(this.currentActiveKey);\n    const responsebody = {'submission': {'marketID': marketid, 'partyID': VegaKeys.currentActiveKey, 'side': side, 'size': size, 'timeInForce': timeinforce, 'type': type,},};\n    // console.log(responsebody);\n    try {\n      let response = await axios.post(this.main_api + '/orders/prepare',  responsebody);\n      // console.log(response);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('prepare_submit_order_market Failed.');\n      return {status: 404,data: 'prepare_submit_order_market Failed.',};\n    }\n  }\n      \n  async prepare_submit_order_limit(marketid,size,type,side,timeinforce,price) {\n    // console.log('PREPARING ORDER');\n    // console.log(VegaKeys.currentActiveKey);\n    const responsebody = {'submission': {'marketID': marketid, 'partyID': VegaKeys.currentActiveKey,'price': price, 'side': side, 'size': size, 'timeInForce': timeinforce, 'type': type,},};\n    // console.log(responsebody);\n    try {\n      let response = await axios.post(this.main_api + '/orders/prepare',  responsebody);\n      // console.log(response);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('prepare_submit_order_limit Failed.');\n      return {status: 404,data: 'prepare_submit_order_limit Failed.',};\n    }\n  }\n\n  //    Signs the transaction\n  // {\n  //     \"signedTx\": {\n  //       \"data\": \"dGVzdGRhdGEK\",\n  //       \"sig\": \"...\",\n  //       \"pubKey\": \"1122aabb...\"\n  //     }\n  //   }    \n  async signtx(blob, propagate = false) {\n    let sign_api = 'https://wallet.n.vega.xyz/api/v1/messages';\n    // console.log(VegaKeys.currentActiveKey);\n    // console.log(this.currentActiveKey);\n    const _header = 'Bearer ' + VegaKeys.token;\n    // console.log(blob);\n    // console.log('Header ' + _header );\n    const data_ = {'tx': blob, 'pubKey': VegaKeys.currentActiveKey, 'propagate': propagate,};\n    // console.log(data_);\n    try {\n      let response = await axios.post(sign_api, data_, { headers: { Authorization: _header,},} );\n      // console.log(response);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Sign_Transaction Failed.');\n      return {status: 404,data: 'Sign_Transaction Failed.',};\n    }       \n  }\n\n\n  // #submits the transaction\n  // {\n  //     \"success\": true\n  //     }\n  async submit_transaction(data,sig) {\n    let responsebody = {'tx': {'data': data,'pubKey': this.currentActiveKey,'sig': sig,},};    \n    // console.log(responsebody);    \n    try {\n      let response= await axios.post(this.main_api + '/transaction', responsebody);\n      // console.log(response);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Submit_transaction Failed.');\n    }\n  }\n    \n        \n  // cancels the order\n  // {\n  //     \"blob\": \"string\"\n  //     }\n  async cancel_order(markid,orderid) {\n    let url = 'https://lb.n.vega.xyz/orders/prepare/' + orderid;\n    let responsebody = {'marketID': markid,'partyID': VegaKeys.currentActiveKey,};\n    let headers = {'Access-Control-Allow-Origin' : '*', 'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS',};\n    // console.log(responsebody);\n    // console.log(url);\n    try {\n      let preparingOrder= await axios.delete(url, {params: responsebody,}, { crossdomain: true },); \n      // console.log(response);\n      if ( preparingOrder.status == 200 ) {\n        let msg_ = ' Deletion request has been successfully prepared.';\n        // console.log(msg);\n        const blob = preparingOrder.data.blob;\n\n        try{          //SIGNING PREPARED ORDER\n          // console.log(blob);\n          const transactionSign = await this.signtx(blob,true);  //Propogating the transaction\n          // console.log(transactionSign);\n          if (transactionSign.status == 200) {    //IF SUCCESSFUL\n            let msg = 'Deletion request has been successfully signed and propogated into the chain.';\n            // console.log(msg);    \n            return {status:transactionSign.status, message:msg,};\n        }\n        else {      //Else for signing order\n          let msg = 'Deletion request\\'s signature transaction failed';\n          // console.log(msg);\n          return {status:transactionSign.status, message:msg,};\n        }\n      }\n      catch (err) {  //catch for signing order\n        let msg = ' Order signature for deletion request returned error';\n        // console.log(msg);\n        return {status:404, message:msg,};\n      }\n    }\n    else {\n      let msg = 'Deletion Order preparation failed';\n      // console.log(msg);\n      return {status:preparingOrder.status, message:msg,};\n    } \n    }\n    catch {\n      // console.log('Cancel Order preparation Failed.');\n      return {status: 404,message: 'Cancel Order preparation Failed.'};      \n    }\n  }    \n\n  // cancels the order\n  // {\n  //     \"blob\": \"string\"\n  //     }\n  async amend_order(markid,orderid) {\n    let responsebody = {'marketID': markid,'orderID': orderid,'partyID': this.currentActiveKey,};\n    try {\n      let response= await axios.delete( this.main_api+'/orders/prepare' + orderid,  responsebody);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Amend Order Failed.');\n    }\n  }    \n\n  // GETS THE DATA OF ALL THE MARKETS\n  //     {\n  //   'markets': [\n  //     {           # Example of 1 market, a list of these objects is returned\n  //       'id': 'LBXRA65PN4FN5HBWRI2YBCOYDG2PBGYU',\n  //       'name': 'GBPVUSD/OCT20',\n  //       'tradableInstrument': {\n  //         'instrument': {\n  //           'id': 'Crypto/GBPVUSD/Futures/Oct20',\n  //           'code': 'CRYPTO:GBPVUSD/OCT20',\n  //           'name': 'October 2020 GBP vs VUSD future',\n  //           'baseName': 'GBP',\n  //           'quoteName': 'VUSD',\n  //           'responsebody': {\n  //             'tags': [\n  //               'asset_class:fx/crypto',\n  //               'product:futures'\n  //             ]\n  //           },\n  //           'initialMarkPrice': '130000',\n  //           'future': {\n  //             'maturity': '2020-10-30T22:59:59Z',\n  //             'asset': 'VUSD',\n  //             'ethereumEvent': {\n  //               'contractID': '0x0B484706fdAF3A4F24b2266446B1cb6d648E3cC1',\n  //               'event': 'price_changed',\n  //               'value': '126000'\n  //             }\n  //           }\n  //         },                  #instrument bracket close\n  //         'marginCalculator': {\n  //           'scalingFactors': {\n  //             'searchLevel': 1.1,\n  //             'initialMargin': 1.2,\n  //             'collateralRelease': 1.4\n  //           }\n  //         },\n  //         'logNormalRiskModel': {\n  //           'riskAversionParameter': 0.01,\n  //           'tau': 0.00011407711613050422,\n  //           'params': {\n  //             'mu': 0,\n  //             'r': 0.016,\n  //             'sigma': 0.09\n  //             }\n  //         }\n  //       },                #tradable instrument bracket close\n  //       'decimalPlaces': '5',\n  //       'continuous': {\n  //         'tickSize': '0'\n  //       }\n  //     },\n  //     }\n  async get_markets() {\n    try {\n      let response = await axios.get(this.main_api + '/markets');\n      // console.log(response);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get Markets Failed.');\n      return {status: 404,data: 'Get Markets Failed',};\n    }\n  }    \n\n\n  // Gets List of markets Data\n  //     {'marketsData': [{'markPrice': '23135052', 'bestBidPrice': '23101998', 'bestBidVolume': '183', 'bestOfferPrice': '23135052', 'bestOfferVolume': '125', 'midPrice': '23118525', 'market': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67', 'timestamp': '1593645095537541796'},\n  //                     {'markPrice': '123826', 'bestBidPrice': '123825', 'bestBidVolume': '18716', 'bestOfferPrice': '123826', 'bestOfferVolume': '6901', 'midPrice': '123825', 'market': 'LBXRA65PN4FN5HBWRI2YBCOYDG2PBGYU', 'timestamp': '1593645095537541796'},\n  //                     {'markPrice': '2500', 'bestBidPrice': '2500', 'bestBidVolume': '515', 'bestOfferPrice': '2501', 'bestOfferVolume': '28', 'midPrice': '2500', 'market': 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN', 'timestamp': '1593645095537541796'}]}\n  async get_list_of_markets() {\n    try {\n      let response = await axios.get(this.main_api + '/markets-data');\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get list of Markets Failed.');\n    }\n  }    \n    \n  //     {'marketData': {'markPrice': '23138017', 'bestBidPrice': '23101998', 'bestBidVolume': '183', 'bestOfferPrice': '23138017', 'bestOfferVolume': '488', 'midPrice': '23120007', 'market': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67', 'timestamp': '1593645237475712568'}}\n  async get_market_data_by_id(id) {\n    try {\n      let response = await axios.get(this.main_api + '/markets-data/' + id);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get Market Data by ID Failed.');\n    }\n  }    \n    \n  //     {'market':\n  //         {'id': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //         'name': 'ETHVUSD/DEC20',\n  //         'tradableInstrument': {\n  //             'instrument': {\n  //                     'id': 'Crypto/ETHVUSD/Futures/Dec20',\n  //                     'code': 'CRYPTO:ETHVUSD/DEC20',\n  //                     'name': 'December 2020 ETH vs VUSD future',\n  //                     'baseName': 'ETH',\n  //                     'quoteName': 'VUSD',\n  //                     'responsebody': {'tags': ['asset_class:fx/crypto', 'product:futures']},\n  //                     'initialMarkPrice': '1410000',\n  //                     'future': {\n  //                         'maturity': '2020-12-31T23:59:59Z',\n  //                         'asset': 'VUSD',\n  //                         'ethereumEvent': {'contractID': '0x0B484706fdAF3A4F24b2266446B1cb6d648E3cC1', 'event': 'price_changed', 'value': '1500000'}\n  //                     }\n  //             },\n  //             'marginCalculator': {'scalingFactors': {'searchLevel': 1.1, 'initialMargin': 1.2, 'collateralRelease': 1.4}},\n  //             'logNormalRiskModel': {'riskAversionParameter': 0.001, 'tau': 0.00011407711613050422, 'params': {'mu': 0, 'r': 0.016, 'sigma': 1.5}}\n  //         },\n  //         'decimalPlaces': '5',\n  //         'continuous': {'tickSize': '0'}\n  //         }\n  //     }    WORKS\n  async get_market_by_id(id) {\n    let url = this.main_api + '/markets/' + id;\n    try {\n      let response = await axios.get(url);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get market by id Failed.');\n    }\n  }    \n\n    \n  async get_accounts_by_market(id,asset) {\n    let responsebody = {'asset':asset,};\n    try {\n      let response = await axios.get(this.main_api + '/markets/' + id + '/accounts',responsebody);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get accounts by market Failed.');\n    }\n  }    \n\n  // #NOT WORKING\n    async get_candles_by_market_id(id,timestamp,intervals) {\n      let async_url = '/markets/' + id + '/candles';\n      let responsebody = {'sinceTimestamp':timestamp,'interval':intervals,};\n      // console.log(async_url + '   ' + responsebody);\n      try {\n        let response= await axios.get(this.main_api + async_url,  { params: responsebody, } );\n        // console.log(response);\n        return {status: response.status,data:  response.data,};\n      }\n      catch {\n        // console.log('Get candles by market Failed.');\n        return {status: 404, data: 'API call failed' };\n      }\n    }    \n\n  async get_market_depth(id,depth) {\n    let responsebody = {'maxDepth':depth,};\n    try {\n      let response= await axios.get(this.main_api + '/markets/'+id+'/depth',responsebody);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get market depth Failed.');\n    }\n  }    \n    \n  async get_orders_by_market(id,skip,limit,desc,open) {\n    let responsebody = {'pagination.skip': skip , 'pagination.limit': limit,'pagination.descending':desc,'open':open,};\n    try {\n      let response = await axios.get(this.main_api + '/markets/'+id+'/orders', responsebody);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get orders by market Failed.');\n    }\n  }    \n\n    \n  async get_order_by_market_orderid(markid,orderid) {\n    let path = '/markets/' + markid + '/orders/' + orderid;\n    try {\n      let response= await axios.get(this.main_api + path);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get orders by markt orderID Failed.');\n    }\n  }    \n\n  async get_trades_by_market(markid,skip,limit,desc = true) {\n    let path = '/markets/' + markid + '/trades';\n    let responsebody = {'pagination.skip': skip , 'pagination.limit': limit,'pagination.descending':desc,};\n    try {\n      let response= await axios.get(this.main_api + path, responsebody);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get trades by market Failed.');\n    }\n  }    \n\n  // #TESTED.WORKED.\n  //     '''{\n  //           'trade': {\n  //             'id': 'V0001020492-0047497446-0000000001',\n  //             'marketID': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //             'price': '23163983',\n  //             'size': '9',\n  //             'buyer': '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n  //             'seller': '65a3231465ffaf4f4182c57d7f7f2f7b1394934be462ed2c8b6cdedad67fbb08',\n  //             'aggressor': 'Sell',\n  //             'buyOrder': 'V0001020304-0047488412',\n  //             'sellOrder': 'V0001020492-0047497446',\n  //             'timestamp': '1593646061008593739',\n  //             'type': 'DEFAULT'\n  //           }\n  //         }\n  async get_latest_trade(markid) {\n    let path = '/markets/' + markid + '/trades/latest';\n    try {\n      let response= await axios.get(this.main_api + path);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get latest trade Failed.');\n    }\n  }    \n    \n  // #TESTED.WORKED\n  //     {\n  //       'trades': [\n  //         {\n  //           'id': 'V0001020492-0047497446-0000000001',\n  //           'marketID': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //           'price': '23163983',\n  //           'size': '9',\n  //           'buyer': '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n  //           'seller': '65a3231465ffaf4f4182c57d7f7f2f7b1394934be462ed2c8b6cdedad67fbb08',\n  //           'aggressor': 'Sell',\n  //           'buyOrder': 'V0001020304-0047488412',\n  //           'sellOrder': 'V0001020492-0047497446',\n  //           'timestamp': '1593646061008593739',\n  //           'type': 'asyncAULT'\n  //         },\n  //         {\n  //           'id': 'V0001020493-0047497456-0000000000',\n  //           'marketID': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //           'price': '23163983',\n  //           'size': '11',\n  //           'buyer': '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n  //           'seller': '131170bfd28a095ebbd43173e8c8aafcb657a3406352f4be663efc26df335702',\n  //           'aggressor': 'Sell',\n  //           'buyOrder': 'V0001020304-0047488412',\n  //           'sellOrder': 'V0001020493-0047497456',\n  //           'timestamp': '1593646061782132046',\n  //           'type': 'asyncAULT'\n  //         },\n  //         {\n  //           'id': 'V0001020493-0047497457-0000000000',\n  //           'marketID': 'VHSRA2G5MDFKREFJ5TOAGHZBBDGCYS67',\n  //           'price': '23163983',\n  //           'size': '43',\n  //           'buyer': '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n  //           'seller': '352e0c5bd28845ab8934d8ed0263a9d8a2fd08690c09a301668a6ae2263f4160',\n  //           'aggressor': 'Sell',\n  //           'buyOrder': 'V0001020304-0047488412',\n  //           'sellOrder': 'V0001020493-0047497457',\n  //           'timestamp': '1593646061782132046',\n  //           'type': 'asyncAULT'\n  //         }\n  //       ]\n  //     }\n  async get_trades_by_orderid(orderid) {\n    let path = '/orders/' + orderid + '/trades';\n    try {\n      let response= await axios.get(this.main_api + path);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get trades by orderID Failed.');\n    }\n  }    \n    \n  async get_allorders_by_orderid(orderid,skip,limit,desc = true) {\n    let path = '/orders/' + orderid + '/versions';\n    let responsebody = {'pagination.skip': skip , 'pagination.limit': limit,'pagination.descending':desc,};\n    try {\n      let response= await axios.get(this.main_api + path, responsebody );\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get all orders by orderID Failed.');\n    }\n  }    \n\n  async get_order_by_pendingorderref(order_ref) {\n    let path = '/orders/' + order_ref;\n    try {\n      let response= await axios.get(this.main_api + path);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get orders by pending orders REF. Failed.');\n    }\n  }    \n    \n  // #TESTED.WORKED\n  // {\n  //   'parties': [\n  //     {'id': 'b030b62f6d8bab518a44400faa2877e9e78af48c08144e40b64f5781c1c3f817'},\n  //     {'id': 'eb0f9067909eb39474a79b8605ff904a52272a0a9b4019219f02709f6a76f62b'},\n  //     {'id': '807938340e39af0bc1b3a1c668ad0a85c498864d8ec4e8bb3ca2cf04026eea0e'},.....(a long list)\n  //    ]\n  // }\n  async get_parties() {\n    try {\n      let response= await axios.get(this.main_api + '/parties');\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get parties Failed.');\n    }\n  }    \n    \n  // #TESTED.WORKED.\n  //     {'party': {'id': 'b030b62f6d8bab518a44400faa2877e9e78af48c08144e40b64f5781c1c3f817'}}\n\n  async get_party_by_id(p_id) {\n    try {\n      let response= await axios.get(this.main_api + '/parties/' + p_id);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get parties by ID Failed.');\n    }\n  }    \n    \n    \n  async get_accounts_by_party(partyid,markid,type,asset) {\n    let path = '/parties/' + partyid + '/accounts';\n    let responsebody = {'marketID':markid,'type':type,'asset':asset,};\n    try {\n      let response= await axios.get(this.main_api + path,responsebody);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get accounts by party Failed.');\n    }\n  }    \n    \n    \n  async get_margin_levels_by_party(partyid,marketid) {\n    let path = '/parties/' + partyid + '/markets/' + marketid + '/margin';\n    try {\n      let response= await axios.get(this.main_api + path);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get margin levels by party Failed.');\n    }\n  }    \n  //WORKING\n  async get_orders_by_party(partyid,skip=0,limit=20,desc = true,open_=true) {\n    let path = '/parties/' + partyid + '/orders';\n    let responsebody = {'pagination.skip': skip,'pagination.limit': limit,'pagination.descending':desc,'open':open_,};\n    try {\n      let response= await axios.get(this.main_api + path, { params: responsebody, });\n      // console.log(response);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get orders by party Failed.');\n      return {status: 404,data: 'Get orders by party Failed.',};\n    }\n  }    \n  //WORKS\n  async get_all_positions() {\n    let partyid = VegaKeys.pubKeys[0];\n    let path = '/parties/' + partyid + '/positions';\n    try {\n      let response= await axios.get(this.main_api + path);\n      // console.log(response);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get positions by party Failed.');\n      return {status: 404,data: 'Get positions by party Failed',};\n    }\n  }    \n\n  \n  async get_positions_by_party_and_market(partyid,markid) {\n    let path = '/parties/' + partyid + '/positions';\n    let responsebody = {'marketID':markid,};\n    try {\n      let response= await axios.get(this.main_api + path, responsebody);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get positions by party Failed.');\n    }\n  }    \n    \n  async get_trades_by_party(partyid,markid = '',skip=0,limit=20,desc = true) {\n    let path = '/parties/' + partyid + '/trades';\n    let responsebody = {'marketID':markid,'pagination.skip': skip,'pagination.limit': limit,'pagination.descending':desc,};\n    try {\n      let response= await axios.get(this.main_api + path,  { params: responsebody, } );\n      // console.log(response);\n      // console.log(response.data);\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get trades by party Failed.');\n      return {status: 404,data: 'Get trades by party Failed',};\n    }\n  }    \n    \n    \n  // #TESTED.WORKED\n  //     {'blockHeight': '1022093', 'backlogLength': '117', 'totalPeers': '5', 'genesisTime': '2020-06-22T11:00:22Z',\n  //       'currentTime': '2020-07-01T23:49:07.031235683Z', 'vegaTime': '2020-07-01T23:49:05.267949357Z', 'status': 'CONNECTED',\n  //       'txPerBlock': '48', 'averageTxBytes': '298', 'averageOrdersPerBlock': '46', 'tradesPerSecond': '41', 'ordersPerSecond': '53',\n  //       'totalMarkets': '3', 'totalAmendOrder': '0', 'totalCancelOrder': '20', 'totalCreateOrder': '47574360', 'totalOrders': '47574360',\n  //       'totalTrades': '32277295', 'orderSubscriptions': 0, 'tradeSubscriptions': 0, 'candleSubscriptions': 0,\n  //       'marketDepthSubscriptions': 0, 'positionsSubscriptions': 0, 'accountSubscriptions': 0, 'marketDataSubscriptions': 0,\n  //       'appVersionHash': 'cc332c27', 'appVersion': 'v0.19.0', 'chainVersion': '0.32.9', 'blockDuration': '905499456',\n  //       'uptime': '2020-06-22T11:17:11.200760432Z'}\n  async get_Statistics() {\n    try {\n      let response= await axios.get(this.main_api + '/statistics');\n      return {status: response.status,data: response.data,};\n    }\n    catch {\n      // console.log('Get Statistics Failed.');\n    }\n  }    \n}\n\nexport default new VegaProtocolService();\n\n"]}]}