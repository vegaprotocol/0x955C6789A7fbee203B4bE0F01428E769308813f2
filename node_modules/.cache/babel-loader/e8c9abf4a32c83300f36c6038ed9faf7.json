{"remainingRequest":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js!/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Downloads/cryptowhaler/src/components/RecentTradesMobile/RecentTrades.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Downloads/cryptowhaler/src/components/RecentTradesMobile/RecentTrades.vue","mtime":1595121760000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\nimport { dateToDisplayDateTime } from '@/utils/utility';\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport EventBus, { EventNames } from '@/eventBuses/default';\nimport { VegaKeys } from '@/utils/localStorage.js';\nimport gql from 'graphql-tag';\nexport default {\n  name: 'recent-trades-mobile',\n  props: {\n    open: {\n      type: Boolean\n    }\n  },\n\n  data() {\n    return {\n      trades: this.$store.getters.recentTrades,\n      isLoggedIn: false,\n      // partiesId: '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n      partiesId: 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN' // VegaKeys.currentActiveKey,\n\n    };\n  },\n\n  apollo: {\n    $subscribe: {\n      positions: {\n        query: gql`subscription name($partyId: String!) {\n                    trades (partyId: $partyId) {\n                        id\n                        market {\n                          name\n                        }\n                        price\n                        size\n                        aggressor\n                        buyOrder\n                        sellOrder\n                        createdAt\n                    }\n                  }`,\n\n        variables() {\n          return {\n            partyId: this.partiesId\n          };\n        },\n\n        result({\n          data,\n          loading\n        }) {\n          if (loading) {// console.log('loading');\n          }\n\n          let trades = data.trades; // console.log(trades);\n\n          this.subcribeToTrades(trades);\n        }\n\n      }\n    }\n  },\n\n  mounted() {\n    this.userLoginListener = () => this.getRecentTrades();\n\n    this.userLogoutListener = () => this.setTradesEmpty();\n\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener);\n  },\n\n  // computed: {\n  //   recentTrades() {\n  //     return this.mapRecentTrades(this.$store.getters.recentTrades);\n  //   },\n  // },\n  methods: {\n    async getRecentTrades() {\n      // this.partiesId = '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633';\n      this.partiesId = VegaKeys.currentActiveKey; // console.log(this.partiesId);\n\n      const response = await VegaProtocolService.get_trades_by_party(this.partiesId); // console.log(response);\n\n      if (response.status == 200) {\n        // console.log(response.data);\n        for (let i = 0; i < response.data.trades.length; i++) {\n          this.addNewTrade(response.data.trades[i]);\n        } // console.log(this.$store.getters.recentTrades);\n        // console.log(this.trades);\n\n\n        this.trades = this.$store.getters.recentTrades; // console.log(this.trades);\n      } else {\n        this.$showErrorMsg({\n          message: 'Something went wrong. Couldn\\'t fetch recent Trades'\n        });\n      }\n    },\n\n    setTradesEmpty() {\n      this.$store.commit('recentTrades', []);\n      this.trades = [];\n    },\n\n    subcribeToTrades(trades) {\n      for (let i = 0; i < trades.length; i++) {\n        let obj = [];\n        obj.marketName = trades[i].market.name;\n        obj.price = Number(trades[i].price) / 100000;\n        obj.size = Number(trades[i].size);\n        obj.aggressor = trades[i].aggressor;\n        obj.buyOrderID = trades[i].buyOrderID;\n        obj.sellOrderID = trades[i].sellOrderID;\n        obj.createdAt = trades[i].createdAt;\n        this.$store.commit('addToRecentTrades', obj); // console.log(this.trades);\n      }\n    },\n\n    addNewTrade(trade) {\n      let obj = [];\n      obj.marketName = this.getNameforMarketID(trade.marketID);\n      obj.price = Number(trade.price) / 100000;\n      obj.size = Number(trade.size);\n      obj.aggressor = trade.aggressor;\n      obj.buyOrderID = trade.buyOrder;\n      obj.sellOrderID = trade.sellOrder;\n      obj.createdAt = trade.timestamp;\n      this.$store.commit('addToRecentTrades', obj); // console.log(this.trades);\n    },\n\n    getNameforMarketID(marketID) {\n      //Gets market name for market ID\n      let markets = this.$store.getters.mappedMarkets; // console.log(markets);\n\n      if (this.$store.getters.mappedMarkets.has(marketID)) {\n        // console.log(marketID + ' name found');\n        let data = this.$store.getters.mappedMarkets.get(marketID); // console.log(data);\n\n        return data.name;\n      } else {\n        return 'undefined';\n      }\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    formatDateTime(timestamp) {\n      return dateToDisplayDateTime(new Date(timestamp));\n    }\n\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n  }\n\n};",{"version":3,"sources":["RecentTrades.vue"],"names":[],"mappings":"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","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport { dateToDisplayDateTime, } from '@/utils/utility';\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport {VegaKeys,} from '@/utils/localStorage.js';\nimport gql from 'graphql-tag';\n\nexport default {\n  name: 'recent-trades-mobile',\n\n  props: {\n    open: {\n      type: Boolean,\n    },\n  },\n\n  data() {\n    return {\n      trades: this.$store.getters.recentTrades,\n      isLoggedIn: false,\n      // partiesId: '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n      partiesId: 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN', // VegaKeys.currentActiveKey,\n    };\n  },\n\n  apollo: {\n    $subscribe: {\n      positions: {\n        query: gql`subscription name($partyId: String!) {\n                    trades (partyId: $partyId) {\n                        id\n                        market {\n                          name\n                        }\n                        price\n                        size\n                        aggressor\n                        buyOrder\n                        sellOrder\n                        createdAt\n                    }\n                  }`,\n\n        variables() {  return {partyId: this.partiesId,};  },\n\n        result({data,loading,}) {\n          if (loading) {\n            // console.log('loading');\n          }\n          let trades = data.trades;\n          // console.log(trades);\n          this.subcribeToTrades(trades);\n        },\n      },\n    },\n  },\n\n\n  mounted() {\n    this.userLoginListener = () => this.getRecentTrades();\n    this.userLogoutListener = () => this.setTradesEmpty();\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener);\n  },\n\n  // computed: {\n  //   recentTrades() {\n  //     return this.mapRecentTrades(this.$store.getters.recentTrades);\n  //   },\n  // },\n\n  methods: {\n    async getRecentTrades() {\n      // this.partiesId = '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633';\n      this.partiesId = VegaKeys.currentActiveKey;\n      // console.log(this.partiesId);\n      const response = await VegaProtocolService.get_trades_by_party(this.partiesId);\n      // console.log(response);\n      if (response.status == 200) {\n        // console.log(response.data);\n        for (let i=0;i<response.data.trades.length;i++ ) {\n          this.addNewTrade(response.data.trades[i]);\n        }\n        // console.log(this.$store.getters.recentTrades);\n        // console.log(this.trades);\n        this.trades = this.$store.getters.recentTrades;        \n        // console.log(this.trades);\n      }\n      else {\n        this.$showErrorMsg({message: 'Something went wrong. Couldn\\'t fetch recent Trades',});        \n      }\n    },\n\n    setTradesEmpty() {\n      this.$store.commit('recentTrades',[]);\n      this.trades = [];\n    },\n\n    subcribeToTrades(trades) {\n      for (let i=0;i<trades.length;i++) {\n        let obj = [];\n        obj.marketName = trades[i].market.name;\n        obj.price = (Number(trades[i].price)/100000);\n        obj.size = Number(trades[i].size);\n        obj.aggressor = trades[i].aggressor;\n        obj.buyOrderID = trades[i].buyOrderID;\n        obj.sellOrderID = trades[i].sellOrderID;\n        obj.createdAt = trades[i].createdAt;\n        this.$store.commit('addToRecentTrades',obj);\n        // console.log(this.trades);\n      }\n    },\n  \n  addNewTrade(trade) {\n        let obj = [];\n        obj.marketName = this.getNameforMarketID(trade.marketID);\n        obj.price = (Number(trade.price)/100000);\n        obj.size = Number(trade.size);\n        obj.aggressor = trade.aggressor;\n        obj.buyOrderID = trade.buyOrder;\n        obj.sellOrderID = trade.sellOrder;\n        obj.createdAt = trade.timestamp;\n        this.$store.commit('addToRecentTrades',obj);\n        // console.log(this.trades);\n    },\n\n    getNameforMarketID(marketID) {          //Gets market name for market ID\n      let markets = this.$store.getters.mappedMarkets;\n      // console.log(markets);\n      if (this.$store.getters.mappedMarkets.has(marketID)) {\n        // console.log(marketID + ' name found');\n        let data = this.$store.getters.mappedMarkets.get(marketID);\n        // console.log(data);\n        return data.name;\n      }\n      else {\n        return 'undefined';\n      }\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    formatDateTime(timestamp) {\n      return dateToDisplayDateTime(new Date(timestamp));\n    },\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./style.scss\" scoped></style>\n\n\n"],"sourceRoot":"src/components/RecentTradesMobile"}]}