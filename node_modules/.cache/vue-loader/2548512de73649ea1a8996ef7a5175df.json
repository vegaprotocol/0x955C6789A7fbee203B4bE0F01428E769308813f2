{"remainingRequest":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/components/Landing/MarketView/TradePane/TradeTab/MarketOrder/FOKFolder/FOKOrder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/components/Landing/MarketView/TradePane/TradeTab/MarketOrder/FOKFolder/FOKOrder.vue","mtime":1595618551683},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport ExchangeDataEventBus from '@/eventBuses/exchangeData';\nimport { stringArrayToHtmlList, } from '@/utils/utility';\n\nexport default {\n  name: 'FOK-Order',\n\n  data() {\n    return {\n      showConfirm: false,\n      formData: {\n        pair: 'BTC/USD',\n        type: 'limit',\n        exc: 'vegaProtocol',\n        vegaMarketName: this.$store.state.selectedVegaMarketNameTrade,\n        vegaMarketId: this.$store.state.selectedVegaMarketTradeId,\n        bos: 'Buy',\n        selectedmarketid: 'LBXRA65PN4FN5HBWRI2YBCOYDG2PBGYU',\n        amount: undefined,        //amount\n        price: undefined,         //price\n        moe: 'market',\n      },\n      AmountPlaceholder: this.$store.state.selectedVegaMarketbaseNameTrade,      \n      showLoader: false,\n      statusCode: 'operational',\n      watcher: '',\n    };\n  },\n\n  // watch: {\n  //   formData: {\n  //     handler: function() {\n  //       this.getVegaStatus();   //getting status for exchange ()\n  //     },\n  //     deep: true,\n  //   },\n  // },\n\n  created() {\n    this.changeVegaMarket = (newMarket) => {       //Changing Selected Vega Market\n      this.formData.vegaMarketName = newMarket.Name;\n      this.formData.vegaMarketId = newMarket.Id;\n      // console.log(this.formData.vegaMarketId + ' ' + this.formData.vegaMarketName);\n    };\n    ExchangeDataEventBus.$on('change-vega-market', this.changeVegaMarket);        \n  },\n\n  computed: {\n\n    estimatedPriceSell() {    //Used \"width: (((Number(ask.totalVolume)/Number(maxVol))*308)) + '%',\" to determine width of dynamic bars\n      if (!this.formData.amount) {\n        return '';\n      }\n      else {      \n        return ((Number(this.formData.amount))*Number(this.$store.state.liveTradePrice)).toFixed(5);\n      }\n    },\n    estimatedPriceBuy() {   \n      if (!this.formData.amount) {\n        return '';\n      }\n      else {      \n        return ((Number(this.formData.amount))*Number(this.$store.state.liveTradePrice)).toFixed(5);\n      }\n    },\n  },\n\n  methods: {\n    // pairChange() {\n    //   this.$store.commit('addLoaderTask', 3, false);\n    // ExchangeDataEventBus.$emit('change-symbol',this.$store.state.selectedPair);\n    // },\n\n    // getStatus() {\n    //   this.statusCode = this.$store.getters.getVegaExchangeStatus;\n    // },\n    \n    confirmTrade(buyOrSell) {   //Called when we press Buy/Sell. Performs validation. If valid, Confirm/Cancel buttons displayed.\n      // console.log('Test1' + this.formData.amount);\n      this.formData.bos = buyOrSell;\n      let validationErrors = [];\n      this.validateQty(validationErrors, 'Amount', this.formData.amount);\n      if (validationErrors.length) {this.$showErrorMsg({message: stringArrayToHtmlList(validationErrors),});\n      } \n      else {this.showConfirm = true;}\n    },\n    \n    validateQty(errorsArray, placeholder, value) {    //Checks if the values entered are valid\n      if (!value || Number(value) === 0) {errorsArray.push(`${placeholder} is required.`);\n      } \n      else if ((value && Number.isNaN(Number(value))) || Number(value) < 0) {\n        errorsArray.push(`${placeholder} is not valid.`);\n      }\n    },\n\n    cancelTrade() {       //When we press Cancel button\n      this.formData.amount = undefined;\n      this.formData.price = undefined;\n      this.showConfirm = false;\n    },\n\n    async makeTrade() {   //When we press make Trade. Shows Loader\n      // console.log('FOK Test2 ' + this.formData.amount);\n      this.showLoader = true;\n      let t1 = this.$store.getters.selectedVegaMarketNameTrade;\n      let t2 = this.$store.getters.selectedVegaMarketTradeId;\n      // console.log( 'In Store ' + t1 + ' ' + t2); //checking market\n      // console.log( 'In OrderPanel ' + this.formData.vegaMarketName+ ' ' + this.formData.vegaMarketId); //checking market\n      //Make Call\n      const response = await  VegaProtocolService.submitOrder_market(this.formData.vegaMarketId,this.formData.amount,this.formData.bos,'MARKET','FOK');\n      setTimeout(() => {\n        if(!response) {   //TimeOut Limit\n          this.formData.amount = undefined;\n          this.formData.price = undefined;\n          this.showConfirm = false;\n          this.$showErrorMsg({message: 'Timeout exceeded.',});\n        }\n      },15000);\n      this.formData.amount = undefined;\n      this.formData.price = undefined;\n      this.showConfirm = false;\n\n      if (response.status == 200) {     //If Successful\n        this.$showSuccessMsg({message: this.formData.vegaMarketName + ' - ' + response.message,});\n      } \n      else {                          //If failed.\n        this.$showErrorMsg({message: response.message,});\n      }\n      this.showLoader = false;\n    },\n  },\n\n  destroyed() {\n    clearInterval(this.watcher);\n    ExchangeDataEventBus.$off('change-vega-market', this.changeVegaMarket);    \n  },\n};\n",{"version":3,"sources":["FOKOrder.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"FOKOrder.vue","sourceRoot":"src/components/Landing/MarketView/TradePane/TradeTab/MarketOrder/FOKFolder","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport ExchangeDataEventBus from '@/eventBuses/exchangeData';\nimport { stringArrayToHtmlList, } from '@/utils/utility';\n\nexport default {\n  name: 'FOK-Order',\n\n  data() {\n    return {\n      showConfirm: false,\n      formData: {\n        pair: 'BTC/USD',\n        type: 'limit',\n        exc: 'vegaProtocol',\n        vegaMarketName: this.$store.state.selectedVegaMarketNameTrade,\n        vegaMarketId: this.$store.state.selectedVegaMarketTradeId,\n        bos: 'Buy',\n        selectedmarketid: 'LBXRA65PN4FN5HBWRI2YBCOYDG2PBGYU',\n        amount: undefined,        //amount\n        price: undefined,         //price\n        moe: 'market',\n      },\n      AmountPlaceholder: this.$store.state.selectedVegaMarketbaseNameTrade,      \n      showLoader: false,\n      statusCode: 'operational',\n      watcher: '',\n    };\n  },\n\n  // watch: {\n  //   formData: {\n  //     handler: function() {\n  //       this.getVegaStatus();   //getting status for exchange ()\n  //     },\n  //     deep: true,\n  //   },\n  // },\n\n  created() {\n    this.changeVegaMarket = (newMarket) => {       //Changing Selected Vega Market\n      this.formData.vegaMarketName = newMarket.Name;\n      this.formData.vegaMarketId = newMarket.Id;\n      // console.log(this.formData.vegaMarketId + ' ' + this.formData.vegaMarketName);\n    };\n    ExchangeDataEventBus.$on('change-vega-market', this.changeVegaMarket);        \n  },\n\n  computed: {\n\n    estimatedPriceSell() {    //Used \"width: (((Number(ask.totalVolume)/Number(maxVol))*308)) + '%',\" to determine width of dynamic bars\n      if (!this.formData.amount) {\n        return '';\n      }\n      else {      \n        return ((Number(this.formData.amount))*Number(this.$store.state.liveTradePrice)).toFixed(5);\n      }\n    },\n    estimatedPriceBuy() {   \n      if (!this.formData.amount) {\n        return '';\n      }\n      else {      \n        return ((Number(this.formData.amount))*Number(this.$store.state.liveTradePrice)).toFixed(5);\n      }\n    },\n  },\n\n  methods: {\n    // pairChange() {\n    //   this.$store.commit('addLoaderTask', 3, false);\n    // ExchangeDataEventBus.$emit('change-symbol',this.$store.state.selectedPair);\n    // },\n\n    // getStatus() {\n    //   this.statusCode = this.$store.getters.getVegaExchangeStatus;\n    // },\n    \n    confirmTrade(buyOrSell) {   //Called when we press Buy/Sell. Performs validation. If valid, Confirm/Cancel buttons displayed.\n      // console.log('Test1' + this.formData.amount);\n      this.formData.bos = buyOrSell;\n      let validationErrors = [];\n      this.validateQty(validationErrors, 'Amount', this.formData.amount);\n      if (validationErrors.length) {this.$showErrorMsg({message: stringArrayToHtmlList(validationErrors),});\n      } \n      else {this.showConfirm = true;}\n    },\n    \n    validateQty(errorsArray, placeholder, value) {    //Checks if the values entered are valid\n      if (!value || Number(value) === 0) {errorsArray.push(`${placeholder} is required.`);\n      } \n      else if ((value && Number.isNaN(Number(value))) || Number(value) < 0) {\n        errorsArray.push(`${placeholder} is not valid.`);\n      }\n    },\n\n    cancelTrade() {       //When we press Cancel button\n      this.formData.amount = undefined;\n      this.formData.price = undefined;\n      this.showConfirm = false;\n    },\n\n    async makeTrade() {   //When we press make Trade. Shows Loader\n      // console.log('FOK Test2 ' + this.formData.amount);\n      this.showLoader = true;\n      let t1 = this.$store.getters.selectedVegaMarketNameTrade;\n      let t2 = this.$store.getters.selectedVegaMarketTradeId;\n      // console.log( 'In Store ' + t1 + ' ' + t2); //checking market\n      // console.log( 'In OrderPanel ' + this.formData.vegaMarketName+ ' ' + this.formData.vegaMarketId); //checking market\n      //Make Call\n      const response = await  VegaProtocolService.submitOrder_market(this.formData.vegaMarketId,this.formData.amount,this.formData.bos,'MARKET','FOK');\n      setTimeout(() => {\n        if(!response) {   //TimeOut Limit\n          this.formData.amount = undefined;\n          this.formData.price = undefined;\n          this.showConfirm = false;\n          this.$showErrorMsg({message: 'Timeout exceeded.',});\n        }\n      },15000);\n      this.formData.amount = undefined;\n      this.formData.price = undefined;\n      this.showConfirm = false;\n\n      if (response.status == 200) {     //If Successful\n        this.$showSuccessMsg({message: this.formData.vegaMarketName + ' - ' + response.message,});\n      } \n      else {                          //If failed.\n        this.$showErrorMsg({message: response.message,});\n      }\n      this.showLoader = false;\n    },\n  },\n\n  destroyed() {\n    clearInterval(this.watcher);\n    ExchangeDataEventBus.$off('change-vega-market', this.changeVegaMarket);    \n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./style.scss\" scoped></style>\n"]}]}