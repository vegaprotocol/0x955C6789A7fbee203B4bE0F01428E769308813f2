{"remainingRequest":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Downloads/cryptowhaler/src/components/Landing/TradeView/Positions/Positions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Downloads/cryptowhaler/src/components/Landing/TradeView/Positions/Positions.vue","mtime":1595121760000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport {VegaKeys,} from '@/utils/localStorage.js';\nimport gql from 'graphql-tag';\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport Multiselect from 'vue-multiselect';\n\nexport default {\n  name: 'positions',\n\n  components: {\n    Spinner,\n    Multiselect,\n  },\n\n  props: {\n    parentHeight: Number,\n    open: {\n      type: Boolean,\n    },\n  },\n\n  data() {\n    return {\n      positions: [],\n      markets : [],\n      subs_positions: new Map(),\n      positions_array: [],\n      isLoggedIn: false,\n      partiesId: VegaKeys.currentActiveKey,\n      totalRealizedPNL_VUSD: 0,\n      totalUnrealizedPNL_VUSD: 0,\n      totalRealizedPNL_BTC: 0,\n      totalUnrealizedPNL_BTC: 0,\n      dropdownSelections: [],\n      dropdownMarkets: this.$store.getters.markets,\n      comparator_firstTime: true,\n    };\n  },\n\n  // computed: {\n  //   positions() {\n  //     return this.mapActiveOrders(this.$store.getters.positions);\n  //   },\n  // },\n\n  apollo: {\n    $subscribe: {\n      positions: {\n        query: gql`subscription name($partyId: String!) {\n                    positions (partyId: $partyId) {\n                        market {\n                          id\n                          name\n                        }\n                        openVolume\n                        realisedPNL\n                        unrealisedPNL\n                        averageEntryPrice\n                        margins{\n                          maintenanceLevel\n                          searchLevel\n                          initialLevel\n                          collateralReleaseLevel\n                        }\n                      }\n                    }`,\n\n        variables() {  return {partyId: this.partiesId,};  },\n\n        result({data,loading,}) {\n          if (loading) {\n            // console.log('loading');\n          }\n          let _positions = data.positions;\n          // // console.log(_positions);\n          this.subcribeToPositions(_positions);\n        },\n      },\n    },\n  },\n\n  mounted() {\n    this.userLoginListener = () => this.setPubKey();\n    this.userLogoutListener = () => (this.positions = []);\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);  //GET POSITIONS\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener); //GO EMPTY AGAIN\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey    \n  },\n\n  methods: {\n\n    setPubKey() {\n      // // console.log(VegaKeys.currentActiveKey);\n      this.positions_array = [];\n      this.positions = [];\n      // console.log(this.dropdownMarkets);\n      this.dropdownMarkets = [];\n      let markets = this.$store.getters.markets;\n      for (let i=0;i<markets.length;i++) {    //used for populating dropdown\n        let cur = {};\n        cur.id = markets[i].id;\n        cur.name = markets[i].data.name;\n        this.dropdownMarkets.push(cur);\n      }\n      // this.dropdownMarkets = \n      // console.log(this.dropdownMarkets);\n\n      this.markets = this.$store.getters.mappedMarketsbyName;\n      this.$store.commit('totalRealizedPNL_VUSD',0);\n      this.$store.commit('totalUnrealizedPNL_VUSD',0);  \n      this.$store.commit('totalRealizedPNL_BTC',0);\n      this.$store.commit('totalUnrealizedPNL_BTC',0);          \n      this.partiesId = VegaKeys.currentActiveKey;\n      // // console.log(this.partiesId);\n    },\n\n    subcribeToPositions(positions) {\n      // if (!this.subs_positions.has(positions.market.id)) {\n      let obj = [];\n      obj.averageEntryPrice = (Number(positions.averageEntryPrice)/100000).toFixed(5);\n      obj.openVolume = Number(positions.openVolume);\n      obj.realisedPNL = (Number(positions.realisedPNL)/100000).toFixed(5);\n      obj.unrealisedPNL = (Number(positions.unrealisedPNL)/100000).toFixed(5);\n      obj.maintenanceLevel = (Number(positions.margins[0].maintenanceLevel)/100000).toFixed(5);\n      obj.searchLevel = (Number(positions.margins[0].searchLevel)/100000).toFixed(5);\n      obj.collateralReleaseLevel = (Number(positions.margins[0].collateralReleaseLevel)/100000).toFixed(5);\n      obj.initialLevel = (Number(positions.margins[0].initialLevel)/100000).toFixed(5);\n      obj.market_name  = positions.market.name;\n      obj.marketID = positions.market.id;\n      this.subs_positions.set(String(positions.market.id),obj);\n      //NOTIFICATION when deployed margin falls below search level margin\n      if ( (Number(obj.searchLevel) > Number(obj.initialLevel)) && this.comparator_firstTime ) {\n        this.$showErrorMsg({message: 'The deployed Margin for the market \\'' + obj.market_name + '\\' has dropped below the “search margin level”. You may be liquidated' ,});  \n        this.comparator_firstTime = false;                    \n      }\n      //NOTIFICATION when deployed margin falls below maintenance level margin\n      if ( Number(obj.maintenanceLevel) > Number(obj.initialLevel) ) {\n        this.$showErrorMsg({message: 'The deployed Margin for the market \\'' + obj.market_name + '\\' has dropped below the maintainance margin level”. The Vega Network has initiated the Liquidation process' ,});  \n        this.comparator_firstTime = false;                    \n      }\n\n      // // console.log(this.subs_positions);\n      this.positions_array = Array.from(this.subs_positions, ([name,value,]) => ({name,value,}) );\n      this.totalRealizedPNL_VUSD = 0;\n      this.totalUnrealizedPNL_VUSD = 0;\n      this.totalRealizedPNL_BTC = 0;\n      this.totalUnrealizedPNL_BTC = 0;\n\n      for (let i=0; i<this.positions_array.length ; i++ ) {\n        // // console.log(this.positions_array);\n        // // console.log(this.$store.getters.mappedMarketsbyName);\n        if (this.$store.getters.mappedMarketsbyName.has(this.positions_array[i].value.market_name)) {\n          // // console.log(this.markets);\n          // // console.log(this.positions_array[i].value.market_name);\n          let cur = this.$store.getters.mappedMarketsbyName.get(this.positions_array[i].value.market_name);\n          // // console.log(cur);\n          if (cur.quoteName == 'VUSD') {\n            this.totalRealizedPNL_VUSD = Number(this.totalRealizedPNL_VUSD) + Number(this.positions_array[i].value.realisedPNL);\n            this.totalUnrealizedPNL_VUSD = Number(this.totalUnrealizedPNL_VUSD) + Number(this.positions_array[i].value.unrealisedPNL);\n            this.$store.commit('totalRealizedPNL_VUSD',this.totalRealizedPNL_VUSD);\n            this.$store.commit('totalUnrealizedPNL_VUSD',this.totalUnrealizedPNL_VUSD);\n          }\n          if (cur.quoteName == 'BTC') {\n            this.totalRealizedPNL_BTC = Number(this.totalRealizedPNL_BTC) + Number(this.positions_array[i].value.realisedPNL);\n            this.totalUnrealizedPNL_BTC = Number(this.totalUnrealizedPNL_BTC) + Number(this.positions_array[i].value.unrealisedPNL);\n            this.$store.commit('totalRealizedPNL_BTC',this.totalRealizedPNL_BTC);\n            this.$store.commit('totalUnrealizedPNL_BTC',this.totalUnrealizedPNL_BTC);\n          }\n        }\n      }\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    userLogoutListener() {\n      this.positions_array = [];\n      this.positions = [];\n      this.$store.commit('totalRealizedPNL',0);\n      this.$store.commit('totalUnrealizedPNL',0);      \n    },\n\n    async closeAllPositions() {   \n      let curr_array = this.positions_array;\n      // console.log(curr_array);\n      for (let i=0;i<curr_array.length;i++) {\n        if (curr_array[i].value.openVolume != 0) {\n            let resp = await this.closePosition(curr_array[i].value);\n        }\n      }\n    },\n\n    //Closes all Positions, Cancels All Orders\n    async closeAllPositionsAndCancelAllOrders() {\n      let curr_array = this.positions_array;\n      // console.log(curr_array);\n\n      //For loop to close all Positions\n      for (let i=0;i<curr_array.length;i++) {\n            let resp = await this.closePositionAndCancelOrders(curr_array[i].value);\n      }\n      this.$showSuccessMsg({message: 'All Positions have been closed' ,});                      \n      this.$showSuccessMsg({message: 'All Active Orders have been cancelled' ,});           \n    },\n\n    //CALLS .closePosition and .cancelAllOrders to close position and cancel All Orders\n    async closePositionAndCancelOrders(position) {  \n      let closePosition = await this.closePosition(position);\n      this.$showSuccessMsg({message: 'The Position for the market \\'' + position.market_name + '\\' has been closed' ,});                \n\n      let activeOrders = this.$store.getters.activeOrders;\n      // console.log(activeOrders);\n      let cancelAllOrders = await this.cancelAllOrders(position);\n    },\n\n    //Cancels all Active Orders for the selected Position's Market\n    async cancelAllOrders(position) {\n      let activeOrders = this.$store.getters.activeOrders;\n      // console.log(activeOrders);\n\n      for (let i=0;i<activeOrders.length;i++) {\n        if (position.marketID == activeOrders[i].marketID) {\n          // console.log(activeOrders[i]);\n          let cancelOrder = await this.cancelOrder(activeOrders[i]);\n        }\n      }\n      this.$showSuccessMsg({message: 'All active Orders for the market \\'' + position.market_name + '\\' have been cancelled' ,});                \n    },\n\n    //Closes the Position\n    async closePosition(position) {       //CLOSES POSITION FOR THE POSITION OBJECT PASSED\n      // console.log(';IN CLOSEPOSITION + ' + position.openVolume + '   ' + Number(position.openVolume) );\n\n      if (Number(position.openVolume) > 0) {     //If having long position\n        // console.log(';IN CLOSEPOSITION');\n        const response = await VegaProtocolService.submitOrder_market(position.marketID,position.openVolume,'Sell','MARKET','FOK'); \n        if (response.status == 200) {     //If Successful\n          this.$showSuccessMsg({message: position.market_name + ' - ' + response.message,});\n        } \n        else {                          //If failed.\n          this.$showErrorMsg({message: position.market_name + ' - ' + response.message,});\n          this.$showErrorMsg({message: 'Could\\t close position. Please try again',});\n        }\n      }\n      else if (Number(position.openVolume) < 0) {     //If having short position\n        // console.log(';IN CLOSEPOSITION');\n        const response = await VegaProtocolService.submitOrder_market(position.marketID,(Math.abs(Number(position.openVolume))).toString(),'Buy','MARKET','FOK'); \n        if (response.status == 200) {     //If Successful\n          this.$showSuccessMsg({message: position.market_name + ' - ' + response.message,});\n        } \n        else {                          //If failed.\n          this.$showErrorMsg({message: position.market_name + ' - ' + response.message,});\n          this.$showErrorMsg({message: 'Could\\t close position. Please try again',});\n        }\n      }\n      else if (Number(position.openVolume) == 0 ) {\n          this.$showErrorMsg({message: 'There are no active positions for the selected market',});\n      }\n    },\n\n    //Cancels the passed Order\n    async cancelOrder(order) {          //CANCELS THE PASSED ORDER \n      // console.log(order); \n      this.$store.commit('addLoaderTask', 1, false);\n      // console.log('in cancel order (Positions Component)');\n      try {\n        const data = await this.$apollo.mutate({\n            mutation: gql`mutation prepareOrderCancel($id: ID!, $partyId: String!, $marketId: String!) {\n            prepareOrderCancel(id:$id, partyId:$partyId,marketId:$marketId) {\n              blob\n            }\n          }`,\n          variables: { id:order.id, partyId:this.partiesId, marketId: order.marketID },\n        });\n      \n        // console.log(data);\n        // console.log(data.data);\n        // console.log(data.data.prepareOrderCancel.blob);\n        // console.log('Cancel Order preparation successful for order with orderID ' + order.id );\n        let blob = data.data.prepareOrderCancel.blob;\n\n        try{                      //SIGNING PREPARED ORDER\n            // console.log(blob);\n            const transactionSign = await VegaProtocolService.signtx(blob,true);  //Propogating the transaction\n            // console.log(transactionSign);\n            if (transactionSign.status == 200) {    //IF SUCCESSFUL\n              let msg = 'Order Cancellation request for orderID: ' + order.id + ' has been successfully signed and propogated into the chain.';\n              // console.log(msg);    \n              this.$showSuccessMsg({message: msg,});                \n            }\n            else {      //Else for signing order\n              let msg = 'Deletion request\\'s signature transaction failed. Please try again';\n              // console.log(msg);\n              this.$$showErrorMsg({message: msg});                \n           }\n        }\n        catch (err) {  //catch for signing order\n          let msg = ' Order signature for deletion request returned error. Please try again';\n          // console.log(msg);\n          this.$$showErrorMsg({message: msg});                \n        }\n      }\n      catch(error) {\n        // console.log(error);\n        let msg = ' Order deletion request preparation returned error. Please try again';\n        // console.log(msg);\n        this.$$showErrorMsg({message: msg});                        \n      } \n    }\n\n\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n};\n",{"version":3,"sources":["Positions.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Positions.vue","sourceRoot":"src/components/Landing/TradeView/Positions","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport {VegaKeys,} from '@/utils/localStorage.js';\nimport gql from 'graphql-tag';\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport Multiselect from 'vue-multiselect';\n\nexport default {\n  name: 'positions',\n\n  components: {\n    Spinner,\n    Multiselect,\n  },\n\n  props: {\n    parentHeight: Number,\n    open: {\n      type: Boolean,\n    },\n  },\n\n  data() {\n    return {\n      positions: [],\n      markets : [],\n      subs_positions: new Map(),\n      positions_array: [],\n      isLoggedIn: false,\n      partiesId: VegaKeys.currentActiveKey,\n      totalRealizedPNL_VUSD: 0,\n      totalUnrealizedPNL_VUSD: 0,\n      totalRealizedPNL_BTC: 0,\n      totalUnrealizedPNL_BTC: 0,\n      dropdownSelections: [],\n      dropdownMarkets: this.$store.getters.markets,\n      comparator_firstTime: true,\n    };\n  },\n\n  // computed: {\n  //   positions() {\n  //     return this.mapActiveOrders(this.$store.getters.positions);\n  //   },\n  // },\n\n  apollo: {\n    $subscribe: {\n      positions: {\n        query: gql`subscription name($partyId: String!) {\n                    positions (partyId: $partyId) {\n                        market {\n                          id\n                          name\n                        }\n                        openVolume\n                        realisedPNL\n                        unrealisedPNL\n                        averageEntryPrice\n                        margins{\n                          maintenanceLevel\n                          searchLevel\n                          initialLevel\n                          collateralReleaseLevel\n                        }\n                      }\n                    }`,\n\n        variables() {  return {partyId: this.partiesId,};  },\n\n        result({data,loading,}) {\n          if (loading) {\n            // console.log('loading');\n          }\n          let _positions = data.positions;\n          // // console.log(_positions);\n          this.subcribeToPositions(_positions);\n        },\n      },\n    },\n  },\n\n  mounted() {\n    this.userLoginListener = () => this.setPubKey();\n    this.userLogoutListener = () => (this.positions = []);\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);  //GET POSITIONS\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener); //GO EMPTY AGAIN\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey    \n  },\n\n  methods: {\n\n    setPubKey() {\n      // // console.log(VegaKeys.currentActiveKey);\n      this.positions_array = [];\n      this.positions = [];\n      // console.log(this.dropdownMarkets);\n      this.dropdownMarkets = [];\n      let markets = this.$store.getters.markets;\n      for (let i=0;i<markets.length;i++) {    //used for populating dropdown\n        let cur = {};\n        cur.id = markets[i].id;\n        cur.name = markets[i].data.name;\n        this.dropdownMarkets.push(cur);\n      }\n      // this.dropdownMarkets = \n      // console.log(this.dropdownMarkets);\n\n      this.markets = this.$store.getters.mappedMarketsbyName;\n      this.$store.commit('totalRealizedPNL_VUSD',0);\n      this.$store.commit('totalUnrealizedPNL_VUSD',0);  \n      this.$store.commit('totalRealizedPNL_BTC',0);\n      this.$store.commit('totalUnrealizedPNL_BTC',0);          \n      this.partiesId = VegaKeys.currentActiveKey;\n      // // console.log(this.partiesId);\n    },\n\n    subcribeToPositions(positions) {\n      // if (!this.subs_positions.has(positions.market.id)) {\n      let obj = [];\n      obj.averageEntryPrice = (Number(positions.averageEntryPrice)/100000).toFixed(5);\n      obj.openVolume = Number(positions.openVolume);\n      obj.realisedPNL = (Number(positions.realisedPNL)/100000).toFixed(5);\n      obj.unrealisedPNL = (Number(positions.unrealisedPNL)/100000).toFixed(5);\n      obj.maintenanceLevel = (Number(positions.margins[0].maintenanceLevel)/100000).toFixed(5);\n      obj.searchLevel = (Number(positions.margins[0].searchLevel)/100000).toFixed(5);\n      obj.collateralReleaseLevel = (Number(positions.margins[0].collateralReleaseLevel)/100000).toFixed(5);\n      obj.initialLevel = (Number(positions.margins[0].initialLevel)/100000).toFixed(5);\n      obj.market_name  = positions.market.name;\n      obj.marketID = positions.market.id;\n      this.subs_positions.set(String(positions.market.id),obj);\n      //NOTIFICATION when deployed margin falls below search level margin\n      if ( (Number(obj.searchLevel) > Number(obj.initialLevel)) && this.comparator_firstTime ) {\n        this.$showErrorMsg({message: 'The deployed Margin for the market \\'' + obj.market_name + '\\' has dropped below the “search margin level”. You may be liquidated' ,});  \n        this.comparator_firstTime = false;                    \n      }\n      //NOTIFICATION when deployed margin falls below maintenance level margin\n      if ( Number(obj.maintenanceLevel) > Number(obj.initialLevel) ) {\n        this.$showErrorMsg({message: 'The deployed Margin for the market \\'' + obj.market_name + '\\' has dropped below the maintainance margin level”. The Vega Network has initiated the Liquidation process' ,});  \n        this.comparator_firstTime = false;                    \n      }\n\n      // // console.log(this.subs_positions);\n      this.positions_array = Array.from(this.subs_positions, ([name,value,]) => ({name,value,}) );\n      this.totalRealizedPNL_VUSD = 0;\n      this.totalUnrealizedPNL_VUSD = 0;\n      this.totalRealizedPNL_BTC = 0;\n      this.totalUnrealizedPNL_BTC = 0;\n\n      for (let i=0; i<this.positions_array.length ; i++ ) {\n        // // console.log(this.positions_array);\n        // // console.log(this.$store.getters.mappedMarketsbyName);\n        if (this.$store.getters.mappedMarketsbyName.has(this.positions_array[i].value.market_name)) {\n          // // console.log(this.markets);\n          // // console.log(this.positions_array[i].value.market_name);\n          let cur = this.$store.getters.mappedMarketsbyName.get(this.positions_array[i].value.market_name);\n          // // console.log(cur);\n          if (cur.quoteName == 'VUSD') {\n            this.totalRealizedPNL_VUSD = Number(this.totalRealizedPNL_VUSD) + Number(this.positions_array[i].value.realisedPNL);\n            this.totalUnrealizedPNL_VUSD = Number(this.totalUnrealizedPNL_VUSD) + Number(this.positions_array[i].value.unrealisedPNL);\n            this.$store.commit('totalRealizedPNL_VUSD',this.totalRealizedPNL_VUSD);\n            this.$store.commit('totalUnrealizedPNL_VUSD',this.totalUnrealizedPNL_VUSD);\n          }\n          if (cur.quoteName == 'BTC') {\n            this.totalRealizedPNL_BTC = Number(this.totalRealizedPNL_BTC) + Number(this.positions_array[i].value.realisedPNL);\n            this.totalUnrealizedPNL_BTC = Number(this.totalUnrealizedPNL_BTC) + Number(this.positions_array[i].value.unrealisedPNL);\n            this.$store.commit('totalRealizedPNL_BTC',this.totalRealizedPNL_BTC);\n            this.$store.commit('totalUnrealizedPNL_BTC',this.totalUnrealizedPNL_BTC);\n          }\n        }\n      }\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    userLogoutListener() {\n      this.positions_array = [];\n      this.positions = [];\n      this.$store.commit('totalRealizedPNL',0);\n      this.$store.commit('totalUnrealizedPNL',0);      \n    },\n\n    async closeAllPositions() {   \n      let curr_array = this.positions_array;\n      // console.log(curr_array);\n      for (let i=0;i<curr_array.length;i++) {\n        if (curr_array[i].value.openVolume != 0) {\n            let resp = await this.closePosition(curr_array[i].value);\n        }\n      }\n    },\n\n    //Closes all Positions, Cancels All Orders\n    async closeAllPositionsAndCancelAllOrders() {\n      let curr_array = this.positions_array;\n      // console.log(curr_array);\n\n      //For loop to close all Positions\n      for (let i=0;i<curr_array.length;i++) {\n            let resp = await this.closePositionAndCancelOrders(curr_array[i].value);\n      }\n      this.$showSuccessMsg({message: 'All Positions have been closed' ,});                      \n      this.$showSuccessMsg({message: 'All Active Orders have been cancelled' ,});           \n    },\n\n    //CALLS .closePosition and .cancelAllOrders to close position and cancel All Orders\n    async closePositionAndCancelOrders(position) {  \n      let closePosition = await this.closePosition(position);\n      this.$showSuccessMsg({message: 'The Position for the market \\'' + position.market_name + '\\' has been closed' ,});                \n\n      let activeOrders = this.$store.getters.activeOrders;\n      // console.log(activeOrders);\n      let cancelAllOrders = await this.cancelAllOrders(position);\n    },\n\n    //Cancels all Active Orders for the selected Position's Market\n    async cancelAllOrders(position) {\n      let activeOrders = this.$store.getters.activeOrders;\n      // console.log(activeOrders);\n\n      for (let i=0;i<activeOrders.length;i++) {\n        if (position.marketID == activeOrders[i].marketID) {\n          // console.log(activeOrders[i]);\n          let cancelOrder = await this.cancelOrder(activeOrders[i]);\n        }\n      }\n      this.$showSuccessMsg({message: 'All active Orders for the market \\'' + position.market_name + '\\' have been cancelled' ,});                \n    },\n\n    //Closes the Position\n    async closePosition(position) {       //CLOSES POSITION FOR THE POSITION OBJECT PASSED\n      // console.log(';IN CLOSEPOSITION + ' + position.openVolume + '   ' + Number(position.openVolume) );\n\n      if (Number(position.openVolume) > 0) {     //If having long position\n        // console.log(';IN CLOSEPOSITION');\n        const response = await VegaProtocolService.submitOrder_market(position.marketID,position.openVolume,'Sell','MARKET','FOK'); \n        if (response.status == 200) {     //If Successful\n          this.$showSuccessMsg({message: position.market_name + ' - ' + response.message,});\n        } \n        else {                          //If failed.\n          this.$showErrorMsg({message: position.market_name + ' - ' + response.message,});\n          this.$showErrorMsg({message: 'Could\\t close position. Please try again',});\n        }\n      }\n      else if (Number(position.openVolume) < 0) {     //If having short position\n        // console.log(';IN CLOSEPOSITION');\n        const response = await VegaProtocolService.submitOrder_market(position.marketID,(Math.abs(Number(position.openVolume))).toString(),'Buy','MARKET','FOK'); \n        if (response.status == 200) {     //If Successful\n          this.$showSuccessMsg({message: position.market_name + ' - ' + response.message,});\n        } \n        else {                          //If failed.\n          this.$showErrorMsg({message: position.market_name + ' - ' + response.message,});\n          this.$showErrorMsg({message: 'Could\\t close position. Please try again',});\n        }\n      }\n      else if (Number(position.openVolume) == 0 ) {\n          this.$showErrorMsg({message: 'There are no active positions for the selected market',});\n      }\n    },\n\n    //Cancels the passed Order\n    async cancelOrder(order) {          //CANCELS THE PASSED ORDER \n      // console.log(order); \n      this.$store.commit('addLoaderTask', 1, false);\n      // console.log('in cancel order (Positions Component)');\n      try {\n        const data = await this.$apollo.mutate({\n            mutation: gql`mutation prepareOrderCancel($id: ID!, $partyId: String!, $marketId: String!) {\n            prepareOrderCancel(id:$id, partyId:$partyId,marketId:$marketId) {\n              blob\n            }\n          }`,\n          variables: { id:order.id, partyId:this.partiesId, marketId: order.marketID },\n        });\n      \n        // console.log(data);\n        // console.log(data.data);\n        // console.log(data.data.prepareOrderCancel.blob);\n        // console.log('Cancel Order preparation successful for order with orderID ' + order.id );\n        let blob = data.data.prepareOrderCancel.blob;\n\n        try{                      //SIGNING PREPARED ORDER\n            // console.log(blob);\n            const transactionSign = await VegaProtocolService.signtx(blob,true);  //Propogating the transaction\n            // console.log(transactionSign);\n            if (transactionSign.status == 200) {    //IF SUCCESSFUL\n              let msg = 'Order Cancellation request for orderID: ' + order.id + ' has been successfully signed and propogated into the chain.';\n              // console.log(msg);    \n              this.$showSuccessMsg({message: msg,});                \n            }\n            else {      //Else for signing order\n              let msg = 'Deletion request\\'s signature transaction failed. Please try again';\n              // console.log(msg);\n              this.$$showErrorMsg({message: msg});                \n           }\n        }\n        catch (err) {  //catch for signing order\n          let msg = ' Order signature for deletion request returned error. Please try again';\n          // console.log(msg);\n          this.$$showErrorMsg({message: msg});                \n        }\n      }\n      catch(error) {\n        // console.log(error);\n        let msg = ' Order deletion request preparation returned error. Please try again';\n        // console.log(msg);\n        this.$$showErrorMsg({message: msg});                        \n      } \n    }\n\n\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./style.scss\" scoped></style>\n\n\n"]}]}