{"remainingRequest":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Downloads/cryptowhaler/src/components/Withdrawl/CryptoWithdrawls/CryptoWithdrawls.vue?vue&type=style&index=0&id=39b63d42&lang=scss&scoped=true&","dependencies":[{"path":"/Users/chrismoores/Downloads/cryptowhaler/src/components/Withdrawl/CryptoWithdrawls/CryptoWithdrawls.vue","mtime":1595121760000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/sass-loader/lib/loader.js","mtime":1595248086264},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.resend {\n  line-height: 40px;\n}\n.resend :hover {\n  color: var(--primary-text-color);\n}\n",{"version":3,"sources":["CryptoWithdrawls.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFA;AACA;AACA;AACA;AACA;AACA","file":"CryptoWithdrawls.vue","sourceRoot":"src/components/Withdrawl/CryptoWithdrawls","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport { stringArrayToHtmlList, } from '@/utils/utility';\n\nexport default {\n  name: 'crypto-withdrawls',\n  data() {\n    return {\n      supportedCoins: ['BTC', 'eth', 'LTC','xrp',],\n      formValue: {\n        amount: '',\n        recievingAddress: '',\n        coin: 'BTC',\n      },\n      withdrawalFee: 0,\n      statuses: {\n        btc: 'feature under development',\n        ltc: 'feature under development',\n        eth: 'feature under development',\n        dai: 'feature under development',\n      },\n      fees: {\n        btc: 0,\n        eth: 0,\n        ltc: 0,\n        xrp: 0,\n      },\n    };\n  },\n  watch: {\n    'formValue.coin': {\n      handler: function(to) {\n        this.showFees(to);\n      },\n      deep: true,\n    },\n  },\n\n  methods: {\n\n    getStatus(coin) {\n      if(coin === 'btc') {\n        return  'feature under development';\n      } else  if(coin === 'eth') {\n        return  'feature under development';\n      } else if(coin === 'ltc'){\n        return  'feature under development';\n      } else if(coin === 'xrp'){\n        return  'feature under development';\n      }\n    },\n\n\n    withdrawCrypto() {\n      let validationErrors = [];\n      if (!(Number(this.formValue.amount) > 0)) {\n        validationErrors.push('Invalid Amount');\n      }\n      if (!this.formValue.recievingAddress)\n        validationErrors.push('Recieving Address is required');\n      if (validationErrors.length) {\n        this.$showErrorMsg({\n          message: stringArrayToHtmlList(validationErrors),\n        });\n      } \n      else {\n        this.otpSent = true;\n        this.$showErrorMsg({\n          message: 'This feature is currently not supported in Vega testnet',\n        });\n      }\n      this.$store.commit('removeLoaderTask', 1);\n    },\n    getGrpId(index) {\n      return 'grp-a' + index;\n    },\n    getGrpId2(index) {\n      return 'grp-b' + index;\n    },\n    async showFees(coin) {\n      this.withdrawalFee = this.fees[coin];\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.resend {\n  line-height: 40px;\n}\n.resend :hover {\n  color: var(--primary-text-color);\n}\n</style>\n"]}]}