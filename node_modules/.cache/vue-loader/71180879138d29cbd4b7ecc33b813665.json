{"remainingRequest":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Downloads/cryptowhaler/src/components/ActiveOrdersMobile/ActiveOrders.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Downloads/cryptowhaler/src/components/ActiveOrdersMobile/ActiveOrders.vue","mtime":1595121760000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n\nimport { dateToDisplayDateTime, } from '@/utils/utility';\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport { VegaKeys, } from '@/utils/localStorage';\nimport gql from 'graphql-tag';\n\nexport default {\n  \n  name: 'active-trades-mobile',\n\n  components: {},\n\n  props: {\n    open: {\n      type: Boolean,\n    },\n  },\n\n  data() {\n    return {\n      orders: this.$store.getters.activeOrders,\n      tableHeight: '',\n      orders_array: [],\n      isLoggedIn: false,\n      partiesId: VegaKeys.currentActiveKey,          \n      // showLoader:false,\n      // snapTaken: false,\n    };\n  },  \n\n  apollo: {\n    $subscribe: {\n      orders: {\n        query: gql`subscription name($partyId: String!) {\n                  orders (partyId:$partyId) {\n                      id\n                      price\n                      side\n                      size\n                      remaining\n                      timeInForce\n                      market {\n                        id\n                        name\n                      }\n                      status\n                      createdAt\n                  }\n                }`,\n\n        variables() {  return {partyId: this.partiesId,};  },\n\n        result({data,loading,}) {\n          if (loading) {\n            // console.log('loading');\n          }\n          let order = data.orders;\n          // console.log(order);\n          for (let i=0;i<order.length;i++)\n          {\n            // console.log(order[i]);\n            if (order[i] == null ) {\n              this.$showErrorMsg({message: ' Recently entered order has been rejected by the Vega Network',});                \n            }\n            else if ( order[i].status == 'Rejected') {\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size;\n              this.$showErrorMsg({message: msg +  ' has been rejected by the Vega Network',});                \n            }\n            else if (order[i].status == 'Filled') {\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size;\n              this.$showSuccessMsg({message: msg +  ' has been filled',});                \n            }\n            else if (order[i].status == 'Stopped') {\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size;\n              this.$showErrorMsg({message: msg +  ' has been stopped by the Vega Network',});                \n            }\n            else if (order[i].status == 'PartiallyFilled') {\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size + ' has been partially filled (Filled = ' + (Number(order[i].size) - Number(order[i].remaining)) + ', Remaining = ' + Number(order[i].remaining);\n              this.$showSuccessMsg({message: msg +  ' by the Vega Network',});                \n              this.addNewOrder(order[i]);\n\n            }\n            else if (order[i].status == 'Cancelled') {\n              this.$store.commit('removeFromActiveOrders',order[i].id);\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size + ' with orderID - ' + order[i].id;\n              this.$showSuccessMsg({message: msg +  ' has been successfully cancelled',});                \n            }           \n            else if (order[i].status == 'Active') {  //Only active Orders\n              this.addNewOrder(order[i]);\n            }\n          }\n        },\n      },\n    },\n  },\n\n\n  // computed: {\n  //   activeOrders() {\n  //     return this.mapActiveOrders(this.$store.getters.activeOrders);\n  //   },\n  // },\n\n  mounted() {     //handles Login/Logout\n    this.userLoginListener = () => this.getActiveOrders();\n    this.userLogoutListener = () => (this.deleteOrders());\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey\n  },\n\n  methods: {\n\n    addNewOrder(order) {  //Adding new order incoming from subscription\n      let new_order = this.mapNewOrder(order);\n      // console.log(new_order);\n      // this.orders.unshift(new_order);\n      this.$store.commit('addToActiveOrders',new_order);\n      // console.log(this.$store.getters.activeOrders);\n    },\n\n    async getActiveOrders() {     //will call vegaProtocolService \n      this.$store.commit('activeOrders',[]);\n      this.orders = [];\n      this.partiesId = VegaKeys.currentActiveKey;\n      // console.log(this.partiesId);\n      // console.log(VegaKeys.currentActiveKey);\n      const response = await VegaProtocolService.get_orders_by_party(this.partiesId);\n      // console.log(response);\n      if (response.status == 200) {\n        // console.log(response.data);\n        for (let i=0; i<response.data.orders.length;i++) {\n          let new_ = this.mapNewOrder_API(response.data.orders[i]);\n          // console.log(new_);\n          // this.orders.unshift(new_);\n          this.$store.commit('addToActiveOrders',new_);\n          // console.log(this.$store.getters.activeOrders);\n        }\n          // console.log(this.orders);\n          this.orders = this.$store.getters.activeOrders;\n          // console.log(this.orders);          \n      }\n      else {\n        this.$showErrorMsg({message: 'Something went wrong. Couldn\\'t fetch orders',});        \n      }\n    },\n\n    deleteOrders() {  //cleaning order history \n      this.$store.commit('activeOrders',[]);\n      this.orders = [];\n    },\n\n    mapNewOrder_API(order) {\n      let new_order = {};\n      new_order.id = order.id;\n      new_order.price = order.price;\n      new_order.side = order.side;\n      new_order.size = order.size;\n      new_order.remaining = order.remaining;\n      new_order.marketID = order.marketID;\n      new_order.market = this.getNameforMarketID(order.marketID);\n      new_order.status = order.status;\n      new_order.orderExecType = order.timeInForce;\n      new_order.creationTime = order.createdAt;\n      // console.log(new_order);\n      return new_order;\n    },    \n\n    getNameforMarketID(marketID) {          //Gets market name for market ID\n      let markets = this.$store.getters.mappedMarkets;\n      // console.log(markets);\n      if (this.$store.getters.mappedMarkets.has(marketID)) {\n        // console.log(marketID + ' name found');\n        let data = this.$store.getters.mappedMarkets.get(marketID);\n        // console.log(data);\n        return data.name;\n      }\n      else {\n        return 'undefined';\n      }\n    },\n\n    mapNewOrder(order) {\n      let new_order = {};\n      new_order.id = order.id;\n      new_order.price = order.price;\n      new_order.side = order.side;\n      new_order.size = order.size;\n      new_order.remaining = order.remaining;\n      new_order.market = order.market.name;\n      new_order.marketID = order.market.id;\n      new_order.status = order.status;\n      new_order.orderExecType = order.timeInForce;\n      new_order.creationTime = order.createdAt;\n      return new_order;\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    formatDateTime(timestamp) {\n      return dateToDisplayDateTime(new Date(timestamp));\n    },\n\n    async cancelAllOrders() {\n      for (let i=0;i<this.orders.length;i++) {\n        let resp = await this.cancelOrder(this.orders[i]);\n      }\n      // console.log(this.orders);\n      this.getActiveOrders();\n    },\n\n    async cancelOrder(order) {        \n      // console.log(order);\n      this.$store.commit('addLoaderTask', 1, false);\n      // console.log('in cancel order');\n      try {\n        const data = await this.$apollo.mutate({\n            mutation: gql`mutation prepareOrderCancel($id: ID!, $partyId: String!, $marketId: String!) {\n            prepareOrderCancel(id:$id, partyId:$partyId,marketId:$marketId) {\n              blob\n            }\n          }`,\n          variables: { id:order.id, partyId:this.partiesId, marketId: order.marketID },\n        });\n      \n        // console.log(data);\n        // console.log(data.data);\n        // console.log(data.data.prepareOrderCancel.blob);\n        // console.log('Cancel Order preparation successful for order with orderID ' + order.id );\n        let blob = data.data.prepareOrderCancel.blob;\n\n        try{                      //SIGNING PREPARED ORDER\n            // console.log(blob);\n            const transactionSign = await VegaProtocolService.signtx(blob,true);  //Propogating the transaction\n            // console.log(transactionSign);\n            if (transactionSign.status == 200) {    //IF SUCCESSFUL\n              let msg = 'Order Cancellation request for orderID: ' + order.id + ' has been successfully signed and propogated into the chain.';\n              // console.log(msg);    \n              this.$showSuccessMsg({message: msg,});                \n            }\n            else {      //Else for signing order\n              let msg = 'Deletion request\\'s signature transaction failed. Please try again';\n              // console.log(msg);\n              this.$$showErrorMsg({message: msg});                \n           }\n        }\n        catch (err) {  //catch for signing order\n          let msg = ' Order signature for deletion request returned error. Please try again';\n          // console.log(msg);\n          this.$$showErrorMsg({message: msg});                \n        }\n      }\n      catch(error) {\n        // console.log(error);\n        let msg = ' Order deletion request preparation returned error. Please try again';\n        // console.log(msg);\n        this.$$showErrorMsg({message: msg});                        \n      } \n    }\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$off(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey    \n  },\n\n};\n",{"version":3,"sources":["ActiveOrders.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"ActiveOrders.vue","sourceRoot":"src/components/ActiveOrdersMobile","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport { dateToDisplayDateTime, } from '@/utils/utility';\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport { VegaKeys, } from '@/utils/localStorage';\nimport gql from 'graphql-tag';\n\nexport default {\n  \n  name: 'active-trades-mobile',\n\n  components: {},\n\n  props: {\n    open: {\n      type: Boolean,\n    },\n  },\n\n  data() {\n    return {\n      orders: this.$store.getters.activeOrders,\n      tableHeight: '',\n      orders_array: [],\n      isLoggedIn: false,\n      partiesId: VegaKeys.currentActiveKey,          \n      // showLoader:false,\n      // snapTaken: false,\n    };\n  },  \n\n  apollo: {\n    $subscribe: {\n      orders: {\n        query: gql`subscription name($partyId: String!) {\n                  orders (partyId:$partyId) {\n                      id\n                      price\n                      side\n                      size\n                      remaining\n                      timeInForce\n                      market {\n                        id\n                        name\n                      }\n                      status\n                      createdAt\n                  }\n                }`,\n\n        variables() {  return {partyId: this.partiesId,};  },\n\n        result({data,loading,}) {\n          if (loading) {\n            // console.log('loading');\n          }\n          let order = data.orders;\n          // console.log(order);\n          for (let i=0;i<order.length;i++)\n          {\n            // console.log(order[i]);\n            if (order[i] == null ) {\n              this.$showErrorMsg({message: ' Recently entered order has been rejected by the Vega Network',});                \n            }\n            else if ( order[i].status == 'Rejected') {\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size;\n              this.$showErrorMsg({message: msg +  ' has been rejected by the Vega Network',});                \n            }\n            else if (order[i].status == 'Filled') {\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size;\n              this.$showSuccessMsg({message: msg +  ' has been filled',});                \n            }\n            else if (order[i].status == 'Stopped') {\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size;\n              this.$showErrorMsg({message: msg +  ' has been stopped by the Vega Network',});                \n            }\n            else if (order[i].status == 'PartiallyFilled') {\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size + ' has been partially filled (Filled = ' + (Number(order[i].size) - Number(order[i].remaining)) + ', Remaining = ' + Number(order[i].remaining);\n              this.$showSuccessMsg({message: msg +  ' by the Vega Network',});                \n              this.addNewOrder(order[i]);\n\n            }\n            else if (order[i].status == 'Cancelled') {\n              this.$store.commit('removeFromActiveOrders',order[i].id);\n              let msg = order[i].side + ' order for the market ' + order[i].market.name + ' of size = ' + order[i].size + ' with orderID - ' + order[i].id;\n              this.$showSuccessMsg({message: msg +  ' has been successfully cancelled',});                \n            }           \n            else if (order[i].status == 'Active') {  //Only active Orders\n              this.addNewOrder(order[i]);\n            }\n          }\n        },\n      },\n    },\n  },\n\n\n  // computed: {\n  //   activeOrders() {\n  //     return this.mapActiveOrders(this.$store.getters.activeOrders);\n  //   },\n  // },\n\n  mounted() {     //handles Login/Logout\n    this.userLoginListener = () => this.getActiveOrders();\n    this.userLogoutListener = () => (this.deleteOrders());\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey\n  },\n\n  methods: {\n\n    addNewOrder(order) {  //Adding new order incoming from subscription\n      let new_order = this.mapNewOrder(order);\n      // console.log(new_order);\n      // this.orders.unshift(new_order);\n      this.$store.commit('addToActiveOrders',new_order);\n      // console.log(this.$store.getters.activeOrders);\n    },\n\n    async getActiveOrders() {     //will call vegaProtocolService \n      this.$store.commit('activeOrders',[]);\n      this.orders = [];\n      this.partiesId = VegaKeys.currentActiveKey;\n      // console.log(this.partiesId);\n      // console.log(VegaKeys.currentActiveKey);\n      const response = await VegaProtocolService.get_orders_by_party(this.partiesId);\n      // console.log(response);\n      if (response.status == 200) {\n        // console.log(response.data);\n        for (let i=0; i<response.data.orders.length;i++) {\n          let new_ = this.mapNewOrder_API(response.data.orders[i]);\n          // console.log(new_);\n          // this.orders.unshift(new_);\n          this.$store.commit('addToActiveOrders',new_);\n          // console.log(this.$store.getters.activeOrders);\n        }\n          // console.log(this.orders);\n          this.orders = this.$store.getters.activeOrders;\n          // console.log(this.orders);          \n      }\n      else {\n        this.$showErrorMsg({message: 'Something went wrong. Couldn\\'t fetch orders',});        \n      }\n    },\n\n    deleteOrders() {  //cleaning order history \n      this.$store.commit('activeOrders',[]);\n      this.orders = [];\n    },\n\n    mapNewOrder_API(order) {\n      let new_order = {};\n      new_order.id = order.id;\n      new_order.price = order.price;\n      new_order.side = order.side;\n      new_order.size = order.size;\n      new_order.remaining = order.remaining;\n      new_order.marketID = order.marketID;\n      new_order.market = this.getNameforMarketID(order.marketID);\n      new_order.status = order.status;\n      new_order.orderExecType = order.timeInForce;\n      new_order.creationTime = order.createdAt;\n      // console.log(new_order);\n      return new_order;\n    },    \n\n    getNameforMarketID(marketID) {          //Gets market name for market ID\n      let markets = this.$store.getters.mappedMarkets;\n      // console.log(markets);\n      if (this.$store.getters.mappedMarkets.has(marketID)) {\n        // console.log(marketID + ' name found');\n        let data = this.$store.getters.mappedMarkets.get(marketID);\n        // console.log(data);\n        return data.name;\n      }\n      else {\n        return 'undefined';\n      }\n    },\n\n    mapNewOrder(order) {\n      let new_order = {};\n      new_order.id = order.id;\n      new_order.price = order.price;\n      new_order.side = order.side;\n      new_order.size = order.size;\n      new_order.remaining = order.remaining;\n      new_order.market = order.market.name;\n      new_order.marketID = order.market.id;\n      new_order.status = order.status;\n      new_order.orderExecType = order.timeInForce;\n      new_order.creationTime = order.createdAt;\n      return new_order;\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    formatDateTime(timestamp) {\n      return dateToDisplayDateTime(new Date(timestamp));\n    },\n\n    async cancelAllOrders() {\n      for (let i=0;i<this.orders.length;i++) {\n        let resp = await this.cancelOrder(this.orders[i]);\n      }\n      // console.log(this.orders);\n      this.getActiveOrders();\n    },\n\n    async cancelOrder(order) {        \n      // console.log(order);\n      this.$store.commit('addLoaderTask', 1, false);\n      // console.log('in cancel order');\n      try {\n        const data = await this.$apollo.mutate({\n            mutation: gql`mutation prepareOrderCancel($id: ID!, $partyId: String!, $marketId: String!) {\n            prepareOrderCancel(id:$id, partyId:$partyId,marketId:$marketId) {\n              blob\n            }\n          }`,\n          variables: { id:order.id, partyId:this.partiesId, marketId: order.marketID },\n        });\n      \n        // console.log(data);\n        // console.log(data.data);\n        // console.log(data.data.prepareOrderCancel.blob);\n        // console.log('Cancel Order preparation successful for order with orderID ' + order.id );\n        let blob = data.data.prepareOrderCancel.blob;\n\n        try{                      //SIGNING PREPARED ORDER\n            // console.log(blob);\n            const transactionSign = await VegaProtocolService.signtx(blob,true);  //Propogating the transaction\n            // console.log(transactionSign);\n            if (transactionSign.status == 200) {    //IF SUCCESSFUL\n              let msg = 'Order Cancellation request for orderID: ' + order.id + ' has been successfully signed and propogated into the chain.';\n              // console.log(msg);    \n              this.$showSuccessMsg({message: msg,});                \n            }\n            else {      //Else for signing order\n              let msg = 'Deletion request\\'s signature transaction failed. Please try again';\n              // console.log(msg);\n              this.$$showErrorMsg({message: msg});                \n           }\n        }\n        catch (err) {  //catch for signing order\n          let msg = ' Order signature for deletion request returned error. Please try again';\n          // console.log(msg);\n          this.$$showErrorMsg({message: msg});                \n        }\n      }\n      catch(error) {\n        // console.log(error);\n        let msg = ' Order deletion request preparation returned error. Please try again';\n        // console.log(msg);\n        this.$$showErrorMsg({message: msg});                        \n      } \n    }\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$off(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey    \n  },\n\n};\n</script>\n\n<style lang=\"scss\" src=\"./style.scss\" scoped></style>\n\n\n"]}]}