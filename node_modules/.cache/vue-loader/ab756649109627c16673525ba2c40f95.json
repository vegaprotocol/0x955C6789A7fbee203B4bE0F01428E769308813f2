{"remainingRequest":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/components/Landing/TradeView/RecentTrades/RecentTrades.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/components/Landing/TradeView/RecentTrades/RecentTrades.vue","mtime":1595618551647},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n\nimport { dateToDisplayDateTime, } from '@/utils/utility';\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport {VegaKeys,} from '@/utils/localStorage.js';\nimport gql from 'graphql-tag';\n\nexport default {\n  name: 'recent-trades',\n\n  props: {\n    open: {\n      type: Boolean,\n    },\n  },\n\n  data() {\n    return {\n      trades: this.$store.getters.recentTrades,\n      isLoggedIn: false,\n      // partiesId: '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n      partiesId: VegaKeys.currentActiveKey,\n    };\n  },\n\n  apollo: {\n    $subscribe: {\n      positions: {\n        query: gql`subscription name($partyId: String!) {\n                    trades (partyId: $partyId) {\n                        id\n                        market {\n                          name\n                        }\n                        price\n                        size\n                        aggressor\n                        buyOrder\n                        sellOrder\n                        createdAt\n                    }\n                  }`,\n\n        variables() {  return {partyId: this.partiesId,};  },\n\n        result({data,loading,}) {\n          if (loading) {\n            // console.log('loading');\n          }\n          let trades = data.trades;\n          // console.log(trades);\n          this.subcribeToTrades(trades);\n        },\n      },\n    },\n  },\n\n\n  mounted() {\n    this.userLoginListener = () => this.getRecentTrades();\n    this.userLogoutListener = () => this.setTradesEmpty();\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n\n  // computed: {\n  //   recentTrades() {\n  //     return this.mapRecentTrades(this.$store.getters.recentTrades);\n  //   },\n  // },\n\n  methods: {\n    async getRecentTrades() {\n      // this.partiesId = '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633';\n      this.$store.commit('recentTrades',[]);\n      this.trades = [];\n      this.partiesId = VegaKeys.currentActiveKey;\n      // console.log(this.partiesId);\n      const response = await VegaProtocolService.get_trades_by_party(this.partiesId);\n      // console.log(response);\n      if (response.status == 200) {\n        // console.log(response.data);\n        for (let i=0;i<response.data.trades.length;i++ ) {\n          this.addNewTrade(response.data.trades[i]);\n        }\n        // console.log(this.$store.getters.recentTrades);\n        // console.log(this.trades);\n        this.trades = this.$store.getters.recentTrades;        \n        // console.log(this.trades);\n      }\n      else {\n        this.$showErrorMsg({message: 'Something went wrong. Couldn\\'t fetch recent Trades',});        \n      }\n    },\n\n    setTradesEmpty() {\n      this.$store.commit('recentTrades',[]);\n      this.trades = [];\n    },\n\n    subcribeToTrades(trades) {\n      for (let i=0;i<trades.length;i++) {\n        let obj = [];\n        obj.marketName = trades[i].market.name;\n        obj.price = (Number(trades[i].price)/100000);\n        obj.size = Number(trades[i].size);\n        obj.aggressor = trades[i].aggressor;\n        obj.buyOrderID = trades[i].buyOrderID;\n        obj.sellOrderID = trades[i].sellOrderID;\n        obj.createdAt = trades[i].createdAt;\n        this.$store.commit('addToRecentTrades',obj);\n        // console.log(this.trades);\n      }\n    },\n  \n  addNewTrade(trade) {\n        let obj = [];\n        obj.marketName = this.getNameforMarketID(trade.marketID);\n        obj.price = (Number(trade.price)/100000);\n        obj.size = Number(trade.size);\n        obj.aggressor = trade.aggressor;\n        obj.buyOrderID = trade.buyOrder;\n        obj.sellOrderID = trade.sellOrder;\n        obj.createdAt = trade.timestamp;\n        this.$store.commit('addToRecentTrades',obj);\n        // console.log(this.trades);\n    },\n\n    getNameforMarketID(marketID) {          //Gets market name for market ID\n      let markets = this.$store.getters.mappedMarkets;\n      // console.log(markets);\n      if (this.$store.getters.mappedMarkets.has(marketID)) {\n        // console.log(marketID + ' name found');\n        let data = this.$store.getters.mappedMarkets.get(marketID);\n        // console.log(data);\n        return data.name;\n      }\n      else {\n        return 'undefined';\n      }\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    formatDateTime(timestamp) {\n      return dateToDisplayDateTime(new Date(timestamp));\n    },\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n};\n",{"version":3,"sources":["RecentTrades.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"RecentTrades.vue","sourceRoot":"src/components/Landing/TradeView/RecentTrades","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport { dateToDisplayDateTime, } from '@/utils/utility';\nimport VegaProtocolService from '@/services/VegaProtocolService';\nimport EventBus, { EventNames, } from '@/eventBuses/default';\nimport {VegaKeys,} from '@/utils/localStorage.js';\nimport gql from 'graphql-tag';\n\nexport default {\n  name: 'recent-trades',\n\n  props: {\n    open: {\n      type: Boolean,\n    },\n  },\n\n  data() {\n    return {\n      trades: this.$store.getters.recentTrades,\n      isLoggedIn: false,\n      // partiesId: '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633',\n      partiesId: VegaKeys.currentActiveKey,\n    };\n  },\n\n  apollo: {\n    $subscribe: {\n      positions: {\n        query: gql`subscription name($partyId: String!) {\n                    trades (partyId: $partyId) {\n                        id\n                        market {\n                          name\n                        }\n                        price\n                        size\n                        aggressor\n                        buyOrder\n                        sellOrder\n                        createdAt\n                    }\n                  }`,\n\n        variables() {  return {partyId: this.partiesId,};  },\n\n        result({data,loading,}) {\n          if (loading) {\n            // console.log('loading');\n          }\n          let trades = data.trades;\n          // console.log(trades);\n          this.subcribeToTrades(trades);\n        },\n      },\n    },\n  },\n\n\n  mounted() {\n    this.userLoginListener = () => this.getRecentTrades();\n    this.userLogoutListener = () => this.setTradesEmpty();\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n\n  // computed: {\n  //   recentTrades() {\n  //     return this.mapRecentTrades(this.$store.getters.recentTrades);\n  //   },\n  // },\n\n  methods: {\n    async getRecentTrades() {\n      // this.partiesId = '5946e79a6e21950ea276ea7792d34553347611ee845d57088177c1df99f50633';\n      this.$store.commit('recentTrades',[]);\n      this.trades = [];\n      this.partiesId = VegaKeys.currentActiveKey;\n      // console.log(this.partiesId);\n      const response = await VegaProtocolService.get_trades_by_party(this.partiesId);\n      // console.log(response);\n      if (response.status == 200) {\n        // console.log(response.data);\n        for (let i=0;i<response.data.trades.length;i++ ) {\n          this.addNewTrade(response.data.trades[i]);\n        }\n        // console.log(this.$store.getters.recentTrades);\n        // console.log(this.trades);\n        this.trades = this.$store.getters.recentTrades;        \n        // console.log(this.trades);\n      }\n      else {\n        this.$showErrorMsg({message: 'Something went wrong. Couldn\\'t fetch recent Trades',});        \n      }\n    },\n\n    setTradesEmpty() {\n      this.$store.commit('recentTrades',[]);\n      this.trades = [];\n    },\n\n    subcribeToTrades(trades) {\n      for (let i=0;i<trades.length;i++) {\n        let obj = [];\n        obj.marketName = trades[i].market.name;\n        obj.price = (Number(trades[i].price)/100000);\n        obj.size = Number(trades[i].size);\n        obj.aggressor = trades[i].aggressor;\n        obj.buyOrderID = trades[i].buyOrderID;\n        obj.sellOrderID = trades[i].sellOrderID;\n        obj.createdAt = trades[i].createdAt;\n        this.$store.commit('addToRecentTrades',obj);\n        // console.log(this.trades);\n      }\n    },\n  \n  addNewTrade(trade) {\n        let obj = [];\n        obj.marketName = this.getNameforMarketID(trade.marketID);\n        obj.price = (Number(trade.price)/100000);\n        obj.size = Number(trade.size);\n        obj.aggressor = trade.aggressor;\n        obj.buyOrderID = trade.buyOrder;\n        obj.sellOrderID = trade.sellOrder;\n        obj.createdAt = trade.timestamp;\n        this.$store.commit('addToRecentTrades',obj);\n        // console.log(this.trades);\n    },\n\n    getNameforMarketID(marketID) {          //Gets market name for market ID\n      let markets = this.$store.getters.mappedMarkets;\n      // console.log(markets);\n      if (this.$store.getters.mappedMarkets.has(marketID)) {\n        // console.log(marketID + ' name found');\n        let data = this.$store.getters.mappedMarkets.get(marketID);\n        // console.log(data);\n        return data.name;\n      }\n      else {\n        return 'undefined';\n      }\n    },\n\n    toggleOpen() {\n      this.$emit('toggle-open');\n    },\n\n    formatDateTime(timestamp) {\n      return dateToDisplayDateTime(new Date(timestamp));\n    },\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n};\n</script>\n\n<style lang=\"scss\" src=\"./style.scss\" scoped></style>\n\n\n"]}]}