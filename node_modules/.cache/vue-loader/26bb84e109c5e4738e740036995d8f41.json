{"remainingRequest":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Downloads/cryptowhaler/src/components/History/VegaTradingHistory/VegaTradingHistory.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Downloads/cryptowhaler/src/components/History/VegaTradingHistory/VegaTradingHistory.vue","mtime":1595121760000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Downloads/cryptowhaler/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport { dateToDisplayDateTime, } from '@/utils/utility';\nimport EventBus, { EventNames, } from '@/eventBuses/default';\n\nexport default {\n  name: 'vega-trading-history',\n  components: {\n    Spinner,\n  },\n  data() {\n    return {\n      history: [],\n      spinnerFlag: true,\n      sortBy: 0,\n      searchString: '',\n      initialData: [],\n      displayText: 'Note: This feature is currently not supported with Vega Testnet',\n    };\n  },\n\n  // async created() {\n  //   this.updateData();\n  // },\n\n  watch: {\n    searchString: function() {\n      this.updateData();\n    },\n  },\n\n  created() {\n    this.userLoginListener = () => this.getRecentTrades();\n    this.userLogoutListener = () => this.setTradesEmpty();\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n\n\n  methods: {\n\n    getRecentTrades() {\n      // console.log('ksnvrnv.sv jkrbvukd.rbvjfkbjd');\n      this.history = this.$store.getters.recentTrades;\n      // console.log(this.history);\n    },\n\n    setTradesEmpty() {\n      this.history = [];\n    },\n\n    formatDateTime(timestamp) {\n      return dateToDisplayDateTime(new Date(timestamp));\n    },\n    updateData() {\n      this.history = this.initialData.filter((ele) => {\n        return ele.Pair.includes(this.searchString.toUpperCase()) || ele.ORDER_ID.toString().includes(this.searchString) || ele.id.toString().includes(this.searchString) ;\n      });\n      this.history = this.sortData(this.history);\n    },\n    sortData(data) {\n      switch(this.sortBy) {\n        case 0: \n          return data.reverse();\n        case 1: \n          return data;\n        case 101: \n          return data.sort((b,a) => {\n            return a.ORDER_PRICE - b.ORDER_PRICE;\n          });\n        case 102: \n          return data.sort((b,a) => {\n            return b.ORDER_PRICE - a.ORDER_PRICE;\n          });\n        case 201: \n          return data.sort((b,a) => {\n            return a.EXEC_AMOUNT - b.EXEC_AMOUNT;\n          });\n        case 202: \n          return data.sort((b,a) => {\n            return b.EXEC_AMOUNT - a.EXEC_AMOUNT;\n          });\n        case 301: \n          return data.sort((b,a) => {\n            return a.EXEC_PRICE - b.EXEC_PRICE;\n          });\n        case 302: \n          return data.sort((b,a) => {\n            return b.EXEC_PRICE - a.EXEC_PRICE;\n          });\n        // case 301: \n        //   return data.sort((b,a) => {\n        //     return a.MTS_CREATE - b.MTS_CREATE;\n        //   });\n        // case 302: \n        //   return data.sort((b,a) => {\n        //     return b.MTS_CREATE - a.MTS_CREATE;\n        //   });\n      }\n    },\n    sortDataBy(value) {\n      if(this.sortBy === value) {\n        this.sortBy += 1;\n      } else {\n        this.sortBy = value;\n      }\n      this.updateData();\n    },\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n\n};\n",{"version":3,"sources":["VegaTradingHistory.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"VegaTradingHistory.vue","sourceRoot":"src/components/History/VegaTradingHistory","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport { dateToDisplayDateTime, } from '@/utils/utility';\nimport EventBus, { EventNames, } from '@/eventBuses/default';\n\nexport default {\n  name: 'vega-trading-history',\n  components: {\n    Spinner,\n  },\n  data() {\n    return {\n      history: [],\n      spinnerFlag: true,\n      sortBy: 0,\n      searchString: '',\n      initialData: [],\n      displayText: 'Note: This feature is currently not supported with Vega Testnet',\n    };\n  },\n\n  // async created() {\n  //   this.updateData();\n  // },\n\n  watch: {\n    searchString: function() {\n      this.updateData();\n    },\n  },\n\n  created() {\n    this.userLoginListener = () => this.getRecentTrades();\n    this.userLogoutListener = () => this.setTradesEmpty();\n    EventBus.$on(EventNames.userLogin, this.userLoginListener);\n    EventBus.$on(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n\n\n  methods: {\n\n    getRecentTrades() {\n      // console.log('ksnvrnv.sv jkrbvukd.rbvjfkbjd');\n      this.history = this.$store.getters.recentTrades;\n      // console.log(this.history);\n    },\n\n    setTradesEmpty() {\n      this.history = [];\n    },\n\n    formatDateTime(timestamp) {\n      return dateToDisplayDateTime(new Date(timestamp));\n    },\n    updateData() {\n      this.history = this.initialData.filter((ele) => {\n        return ele.Pair.includes(this.searchString.toUpperCase()) || ele.ORDER_ID.toString().includes(this.searchString) || ele.id.toString().includes(this.searchString) ;\n      });\n      this.history = this.sortData(this.history);\n    },\n    sortData(data) {\n      switch(this.sortBy) {\n        case 0: \n          return data.reverse();\n        case 1: \n          return data;\n        case 101: \n          return data.sort((b,a) => {\n            return a.ORDER_PRICE - b.ORDER_PRICE;\n          });\n        case 102: \n          return data.sort((b,a) => {\n            return b.ORDER_PRICE - a.ORDER_PRICE;\n          });\n        case 201: \n          return data.sort((b,a) => {\n            return a.EXEC_AMOUNT - b.EXEC_AMOUNT;\n          });\n        case 202: \n          return data.sort((b,a) => {\n            return b.EXEC_AMOUNT - a.EXEC_AMOUNT;\n          });\n        case 301: \n          return data.sort((b,a) => {\n            return a.EXEC_PRICE - b.EXEC_PRICE;\n          });\n        case 302: \n          return data.sort((b,a) => {\n            return b.EXEC_PRICE - a.EXEC_PRICE;\n          });\n        // case 301: \n        //   return data.sort((b,a) => {\n        //     return a.MTS_CREATE - b.MTS_CREATE;\n        //   });\n        // case 302: \n        //   return data.sort((b,a) => {\n        //     return b.MTS_CREATE - a.MTS_CREATE;\n        //   });\n      }\n    },\n    sortDataBy(value) {\n      if(this.sortBy === value) {\n        this.sortBy += 1;\n      } else {\n        this.sortBy = value;\n      }\n      this.updateData();\n    },\n  },\n\n  destroyed() {\n    EventBus.$off(EventNames.userLogin, this.userLoginListener);\n    EventBus.$off(EventNames.userLogout, this.userLogoutListener);\n    EventBus.$on(EventNames.pubKeyChanged,this.userLoginListener);  //to handle change in pubKey        \n  },\n\n};\n</script>\n<style lang=\"scss\" src=\"./style.scss\" scoped>\n</style>\n\n\n"]}]}