{"remainingRequest":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/components/Landing/MarketView/BookPane/OrderBook/OrderBook.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/src/components/Landing/MarketView/BookPane/OrderBook/OrderBook.vue","mtime":1595618551664},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrismoores/Projects/Vega/0x955C6789A7fbee203B4bE0F01428E769308813f2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n\nimport ExchangeDataEventBus from '@/eventBuses/exchangeData';\nimport SimpleBar from 'simplebar';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport gql from 'graphql-tag';\n\nexport default {\n  name: 'order-book',\n  components: {\n    Spinner,\n  },\n  props: {\n    parentHeight: Number,\n  },\n\n  data() {\n    return {\n      marketId: 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN', //this.$store.state.selectedVegaMarketId,\n      bids: [],\n      asks: [],\n      price: this.$store.state.liveTradePrice,\n      tableHeight: '',\n      orderHeight: '',\n      timeout: '',\n      orderbookdata: {},\n      showLoader: true,\n      snapF: 0,\n      sum: 0,\n      // precisionNumber: 1,\n      count: 1,\n      barAsk: 0,\n      barBid: 0,\n      order_updates: '',\n      buyPrice: 0,\n      sellPrice:0,\n    };\n  },\n\n  apollo: {\n    $subscribe: {\n      orders: {\n        query: gql`subscription name($marketId: String!) {\n                  orders (marketId: $marketId) {\n                      price\n                      side\n                      size\n                      market {\n                        name\n                      }\n                  }\n                } `,\n        variables() { return {marketId: this.marketId,}; },\n        result(data) {\n          // // console.log(data);\n          let orders = data.data.orders;\n          let asks = [];\n          let bids = [];\n\n          if (Array.isArray(orders) && this.snapF!=1) {     //When new connection, we take the snapshot\n            // // console.log('when snapshot');\n            this.snapF = 1;\n            // // console.log(orders[0]);\n            orders.forEach((item) => {\n              if (item.side == 'Buy') {\n                let localData = {};\n                localData.value = (Number(item.price)/100000).toFixed(5);\n                localData.volume = Number(Math.abs(item.size));\n                bids.push(localData);\n              } \n              else {\n                let localData = {};\n                localData.value = (Number(item.price)/100000).toFixed(5);\n                localData.volume = Number(Math.abs(item.size));\n                asks.push(localData);\n              }\n            });\n            asks.sort(function (a, b) {return a.value - b.value;});\n            bids.sort(function (a, b) {return a.value - b.value;});\n            this.orderbookdata.asks = asks;\n            this.orderbookdata.bids = bids;\n            this.buyPrice = Number(bids[0].value);\n            this.sellPrice = Number(asks[0].value);\n            this.snapshotListener(this.orderbookdata);\n          } \n          else {                                  // To update\n            // // console.log('else fiels');\n            if (this.orderbookdata.asks && this.orderbookdata.bids) {\n              // // console.log('For Update');\n\n              for (let i=0;i<orders.length;i++) {\n                // // console.log(orders[i]);\n                if (orders[i].side == 'Buy') {      //for bid\n                  // let flag = 0;\n                  // this.orderbookdata.bids.forEach(function (elem, index) {\n                  // if (elem.value == Number(orders.price)) {\n                  //   if (Number(orders.size) == 0 && orders.side == 'Buy') {\n                  //     this.orderbookdata.bids.splice(index, 1);\n                  //   } \n                  //   else {\n                  //     this.orderbookdata.bids[index].volume = Number(orders.size);\n                  //   }\n                  //   flag = 1;\n                  // }\n                  // if (index == (this.orderbookdata.bids.length - 1) && (flag == 0)) {  //No volume adjustment needed\n                  let localData = {};\n                  localData.value = (Number(orders[i].price)/100000).toFixed(5);\n                  localData.volume = Number(orders[i].size);\n                  this.buyPrice = Number(localData.value);      //Buy Price\n                  this.orderbookdata.bids.push(localData);\n                  this.orderbookdata.bids.sort(function (a, b) { return a.value - b.value; });\n                  // // // console.log('bids working');\n                  // // // console.log(this.orderbookdata);\n                  if (this.orderbookdata.bids.length > 50) {\n                    this.orderbookdata.bids.pop();                \n                  }\n                }\n                // );\n                // } \n                else {      //for Ask\n                  // let flag = 0;\n                  // this.orderbookdata.asks.forEach(function (elem, index) {\n                  // if (elem.value == Number(orders.price)) {\n                  //   if (Number(orders.size) == 0 && orders.side == 'Sell') {\n                  //     this.orderbookdata.asks.splice(index, 1);\n                  //   } \n                  //   else {\n                  //     this.orderbookdata.asks[index].volume = Number(orders.size);\n                  //   }\n                  //   flag = 1;\n                  // }\n                  // if (index == (this.orderbookdata.bids.length - 1) && (flag == 0)) {  //No volume adjustment needed\n                  let localData = {};\n                  localData.value = (Number(orders[i].price)/100000).toFixed(5);\n                  localData.volume = Number(orders[i].size);\n                  this.sellPrice = Number(localData.value);      //Sell Price                  \n                  this.orderbookdata.asks.push(localData);\n                  this.orderbookdata.asks.sort(function (a, b) { return a.value - b.value; });\n                  if (this.orderbookdata.asks.length > 50) {\n                    this.orderbookdata.asks.shift();                \n                  }                      \n                }\n                // );\n              }\n            }\n\n            if (this.orderbookdata.asks.length > 9 && this.orderbookdata.bids.length > 9) {\n              // // console.log('callling update');\n              this.bookUpdateListener(this.orderbookdata);\n            } \n          }\n        }, \n      },\n    },\n  },\n  // },\n\n  computed: {\n    maxVol() {    //Used \"width: (((Number(ask.totalVolume)/Number(maxVol))*308)) + '%',\" to determine width of dynamic bars\n      return Math.max(this.asks[this.asks.length - 1].totalVolume, this.bids[0].totalVolume);\n    },\n  },\n\n  methods: {\n    // precision(key) {\n    //   ExchangeDataEventBus.$emit('precision', {key,number: this.precisionNumber,});\n\n    //   if (key === 'minus' && this.precisionNumber !== 0) {\n    //     this.precisionNumber = this.precisionNumber - 1;\n    //     this.count = parseFloat(new Decimal(this.count).dividedBy('10').toString());\n    //   } \n    //   else if (key === 'plus' && this.precisionNumber !== 3) {\n    //     this.precisionNumber = this.precisionNumber + 1;\n    //     this.count = parseFloat(new Decimal(this.count).times(10).toString());\n    //   }\n    //   ExchangeDataEventBus.$emit('change-precision', {\n    //     precisionPass: this.count,\n    //     precisionNumber: this.precisionNumber,\n    //   });\n    //   this.timeout = setTimeout(() => this.scrollTopBookToBottom(), 2000);\n    // },\n    scrollTopBookToBottom() {\n      try {\n        let el = document.getElementById('ob-hello1');\n        let obj = new SimpleBar(el, {autoHide: false,});\n        obj.getScrollElement().scrollTop = 9999999;\n      } catch (e) {throw e;}\n    },\n    asksUpdater(parsedSnap) {\n      if (parsedSnap && parsedSnap.asks && parsedSnap.asks.length) {\n        let asks = [parsedSnap.asks.length,];\n        for (let i = 0; i < parsedSnap.asks.length; i++) {\n          if (i === 0) {\n            parsedSnap.asks[i].totalVolume = parsedSnap.asks[i].volume;\n          } \n          else {\n            parsedSnap.asks[i].totalVolume = parsedSnap.asks[i].volume + parsedSnap.asks[i - 1].totalVolume;\n          }\n          asks[parsedSnap.asks.length - (i + 1)] = parsedSnap.asks[i];\n        }\n        return asks.reverse();\n      } \n      else {\n        this.barAsk = 0;\n        return [];\n      }\n    },\n    bidsUpdater(parsedSnap) {\n      if (parsedSnap && parsedSnap.bids && parsedSnap.bids.length) {\n        let bids = [];\n        for (let i = parsedSnap.bids.length - 1; i >= 0; i--) {\n          if (i === parsedSnap.bids.length - 1) {\n            parsedSnap.bids[i].totalVolume = parsedSnap.bids[i].volume;\n          } else {\n            parsedSnap.bids[i].totalVolume = parsedSnap.bids[i].volume + parsedSnap.bids[i + 1].totalVolume;\n          }\n          bids.push(parsedSnap.bids[i]);\n        }\n        return bids.reverse();\n      } \n      else {\n        this.barBid = 0;\n        return [];\n      }\n    },\n  },\n\n  watch: {\n    parentHeight: function(newVal) {\n      let height = newVal / 2;\n      let orderHeight = newVal / 2;\n      let calcHeight = height - 40;\n      this.tableHeight = calcHeight + 'px';\n      this.orderHeight = orderHeight + 'px';\n    },\n  },\n\n  created() {\n    this.count = 1;\n\n    this.snapshotListener = snap => {\n      // // console.log('Snapshot');\n      // // console.log(snap);\n      this.showLoader = false;\n      let parsedSnap = JSON.parse(JSON.stringify(snap));\n      this.asks = this.asksUpdater(parsedSnap);\n      this.bids = this.bidsUpdater(parsedSnap);\n      this.barAsk = this.asks[this.asks.length - 1].totalVolume;\n      this.barBid = this.bids[this.bids.length - 1].totalVolume;\n      this.timeout = setTimeout(() => this.scrollTopBookToBottom(), 2000);\n      this.$store.commit('removeLoaderTask', 1);\n    };\n\n    this.bookUpdateListener = snap => {\n      // // console.log('Update');\n      // // console.log(snap);\n      let parsedSnap = JSON.parse(JSON.stringify(snap));\n      // // // console.log('Parsed snap - ');\n      // // // console.log(parsedSnap);\n      this.asks = this.asksUpdater(parsedSnap);\n      this.bids = this.bidsUpdater(parsedSnap);\n      this.barAsk = this.asks[0].totalVolume;\n      this.barBid = this.bids[this.bids.length - 1].totalVolume;\n      this.showLoader = false;\n      // this.snapshotListener(snap);\n    };\n\n    this.reset = (newMarket) => {\n      this.showLoader = true;\n      this.count = 1;\n      this.asks = [];\n      this.bids = [];\n      this.orderbookdata = {};\n      this.snapF = 0;\n      this.marketId = newMarket.Id;\n      // console.log('New Selected Market being fetched in ORDER-BOOK with Id - ' + this.marketId);\n      // this.precisionNumber = 1;\n    };\n\n    ExchangeDataEventBus.$on('change-vega-market', this.reset);\n  },\n\n  mounted() {\n    this.$root.$on('tickerClicked', () => {\n      this.scrollTopBookToBottom();\n    });\n  },\n  \n  destroyed() {\n    ExchangeDataEventBus.$on('change-vega-market', this.reset);\n    clearInterval(this.timeout);\n  },\n};\n",{"version":3,"sources":["OrderBook.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"OrderBook.vue","sourceRoot":"src/components/Landing/MarketView/BookPane/OrderBook","sourcesContent":["<template src=\"./template.html\"></template>\n\n<script>\nimport ExchangeDataEventBus from '@/eventBuses/exchangeData';\nimport SimpleBar from 'simplebar';\nimport Spinner from '@/components/Spinner/Spinner.vue';\nimport gql from 'graphql-tag';\n\nexport default {\n  name: 'order-book',\n  components: {\n    Spinner,\n  },\n  props: {\n    parentHeight: Number,\n  },\n\n  data() {\n    return {\n      marketId: 'RTJVFCMFZZQQLLYVSXTWEN62P6AH6OCN', //this.$store.state.selectedVegaMarketId,\n      bids: [],\n      asks: [],\n      price: this.$store.state.liveTradePrice,\n      tableHeight: '',\n      orderHeight: '',\n      timeout: '',\n      orderbookdata: {},\n      showLoader: true,\n      snapF: 0,\n      sum: 0,\n      // precisionNumber: 1,\n      count: 1,\n      barAsk: 0,\n      barBid: 0,\n      order_updates: '',\n      buyPrice: 0,\n      sellPrice:0,\n    };\n  },\n\n  apollo: {\n    $subscribe: {\n      orders: {\n        query: gql`subscription name($marketId: String!) {\n                  orders (marketId: $marketId) {\n                      price\n                      side\n                      size\n                      market {\n                        name\n                      }\n                  }\n                } `,\n        variables() { return {marketId: this.marketId,}; },\n        result(data) {\n          // // console.log(data);\n          let orders = data.data.orders;\n          let asks = [];\n          let bids = [];\n\n          if (Array.isArray(orders) && this.snapF!=1) {     //When new connection, we take the snapshot\n            // // console.log('when snapshot');\n            this.snapF = 1;\n            // // console.log(orders[0]);\n            orders.forEach((item) => {\n              if (item.side == 'Buy') {\n                let localData = {};\n                localData.value = (Number(item.price)/100000).toFixed(5);\n                localData.volume = Number(Math.abs(item.size));\n                bids.push(localData);\n              } \n              else {\n                let localData = {};\n                localData.value = (Number(item.price)/100000).toFixed(5);\n                localData.volume = Number(Math.abs(item.size));\n                asks.push(localData);\n              }\n            });\n            asks.sort(function (a, b) {return a.value - b.value;});\n            bids.sort(function (a, b) {return a.value - b.value;});\n            this.orderbookdata.asks = asks;\n            this.orderbookdata.bids = bids;\n            this.buyPrice = Number(bids[0].value);\n            this.sellPrice = Number(asks[0].value);\n            this.snapshotListener(this.orderbookdata);\n          } \n          else {                                  // To update\n            // // console.log('else fiels');\n            if (this.orderbookdata.asks && this.orderbookdata.bids) {\n              // // console.log('For Update');\n\n              for (let i=0;i<orders.length;i++) {\n                // // console.log(orders[i]);\n                if (orders[i].side == 'Buy') {      //for bid\n                  // let flag = 0;\n                  // this.orderbookdata.bids.forEach(function (elem, index) {\n                  // if (elem.value == Number(orders.price)) {\n                  //   if (Number(orders.size) == 0 && orders.side == 'Buy') {\n                  //     this.orderbookdata.bids.splice(index, 1);\n                  //   } \n                  //   else {\n                  //     this.orderbookdata.bids[index].volume = Number(orders.size);\n                  //   }\n                  //   flag = 1;\n                  // }\n                  // if (index == (this.orderbookdata.bids.length - 1) && (flag == 0)) {  //No volume adjustment needed\n                  let localData = {};\n                  localData.value = (Number(orders[i].price)/100000).toFixed(5);\n                  localData.volume = Number(orders[i].size);\n                  this.buyPrice = Number(localData.value);      //Buy Price\n                  this.orderbookdata.bids.push(localData);\n                  this.orderbookdata.bids.sort(function (a, b) { return a.value - b.value; });\n                  // // // console.log('bids working');\n                  // // // console.log(this.orderbookdata);\n                  if (this.orderbookdata.bids.length > 50) {\n                    this.orderbookdata.bids.pop();                \n                  }\n                }\n                // );\n                // } \n                else {      //for Ask\n                  // let flag = 0;\n                  // this.orderbookdata.asks.forEach(function (elem, index) {\n                  // if (elem.value == Number(orders.price)) {\n                  //   if (Number(orders.size) == 0 && orders.side == 'Sell') {\n                  //     this.orderbookdata.asks.splice(index, 1);\n                  //   } \n                  //   else {\n                  //     this.orderbookdata.asks[index].volume = Number(orders.size);\n                  //   }\n                  //   flag = 1;\n                  // }\n                  // if (index == (this.orderbookdata.bids.length - 1) && (flag == 0)) {  //No volume adjustment needed\n                  let localData = {};\n                  localData.value = (Number(orders[i].price)/100000).toFixed(5);\n                  localData.volume = Number(orders[i].size);\n                  this.sellPrice = Number(localData.value);      //Sell Price                  \n                  this.orderbookdata.asks.push(localData);\n                  this.orderbookdata.asks.sort(function (a, b) { return a.value - b.value; });\n                  if (this.orderbookdata.asks.length > 50) {\n                    this.orderbookdata.asks.shift();                \n                  }                      \n                }\n                // );\n              }\n            }\n\n            if (this.orderbookdata.asks.length > 9 && this.orderbookdata.bids.length > 9) {\n              // // console.log('callling update');\n              this.bookUpdateListener(this.orderbookdata);\n            } \n          }\n        }, \n      },\n    },\n  },\n  // },\n\n  computed: {\n    maxVol() {    //Used \"width: (((Number(ask.totalVolume)/Number(maxVol))*308)) + '%',\" to determine width of dynamic bars\n      return Math.max(this.asks[this.asks.length - 1].totalVolume, this.bids[0].totalVolume);\n    },\n  },\n\n  methods: {\n    // precision(key) {\n    //   ExchangeDataEventBus.$emit('precision', {key,number: this.precisionNumber,});\n\n    //   if (key === 'minus' && this.precisionNumber !== 0) {\n    //     this.precisionNumber = this.precisionNumber - 1;\n    //     this.count = parseFloat(new Decimal(this.count).dividedBy('10').toString());\n    //   } \n    //   else if (key === 'plus' && this.precisionNumber !== 3) {\n    //     this.precisionNumber = this.precisionNumber + 1;\n    //     this.count = parseFloat(new Decimal(this.count).times(10).toString());\n    //   }\n    //   ExchangeDataEventBus.$emit('change-precision', {\n    //     precisionPass: this.count,\n    //     precisionNumber: this.precisionNumber,\n    //   });\n    //   this.timeout = setTimeout(() => this.scrollTopBookToBottom(), 2000);\n    // },\n    scrollTopBookToBottom() {\n      try {\n        let el = document.getElementById('ob-hello1');\n        let obj = new SimpleBar(el, {autoHide: false,});\n        obj.getScrollElement().scrollTop = 9999999;\n      } catch (e) {throw e;}\n    },\n    asksUpdater(parsedSnap) {\n      if (parsedSnap && parsedSnap.asks && parsedSnap.asks.length) {\n        let asks = [parsedSnap.asks.length,];\n        for (let i = 0; i < parsedSnap.asks.length; i++) {\n          if (i === 0) {\n            parsedSnap.asks[i].totalVolume = parsedSnap.asks[i].volume;\n          } \n          else {\n            parsedSnap.asks[i].totalVolume = parsedSnap.asks[i].volume + parsedSnap.asks[i - 1].totalVolume;\n          }\n          asks[parsedSnap.asks.length - (i + 1)] = parsedSnap.asks[i];\n        }\n        return asks.reverse();\n      } \n      else {\n        this.barAsk = 0;\n        return [];\n      }\n    },\n    bidsUpdater(parsedSnap) {\n      if (parsedSnap && parsedSnap.bids && parsedSnap.bids.length) {\n        let bids = [];\n        for (let i = parsedSnap.bids.length - 1; i >= 0; i--) {\n          if (i === parsedSnap.bids.length - 1) {\n            parsedSnap.bids[i].totalVolume = parsedSnap.bids[i].volume;\n          } else {\n            parsedSnap.bids[i].totalVolume = parsedSnap.bids[i].volume + parsedSnap.bids[i + 1].totalVolume;\n          }\n          bids.push(parsedSnap.bids[i]);\n        }\n        return bids.reverse();\n      } \n      else {\n        this.barBid = 0;\n        return [];\n      }\n    },\n  },\n\n  watch: {\n    parentHeight: function(newVal) {\n      let height = newVal / 2;\n      let orderHeight = newVal / 2;\n      let calcHeight = height - 40;\n      this.tableHeight = calcHeight + 'px';\n      this.orderHeight = orderHeight + 'px';\n    },\n  },\n\n  created() {\n    this.count = 1;\n\n    this.snapshotListener = snap => {\n      // // console.log('Snapshot');\n      // // console.log(snap);\n      this.showLoader = false;\n      let parsedSnap = JSON.parse(JSON.stringify(snap));\n      this.asks = this.asksUpdater(parsedSnap);\n      this.bids = this.bidsUpdater(parsedSnap);\n      this.barAsk = this.asks[this.asks.length - 1].totalVolume;\n      this.barBid = this.bids[this.bids.length - 1].totalVolume;\n      this.timeout = setTimeout(() => this.scrollTopBookToBottom(), 2000);\n      this.$store.commit('removeLoaderTask', 1);\n    };\n\n    this.bookUpdateListener = snap => {\n      // // console.log('Update');\n      // // console.log(snap);\n      let parsedSnap = JSON.parse(JSON.stringify(snap));\n      // // // console.log('Parsed snap - ');\n      // // // console.log(parsedSnap);\n      this.asks = this.asksUpdater(parsedSnap);\n      this.bids = this.bidsUpdater(parsedSnap);\n      this.barAsk = this.asks[0].totalVolume;\n      this.barBid = this.bids[this.bids.length - 1].totalVolume;\n      this.showLoader = false;\n      // this.snapshotListener(snap);\n    };\n\n    this.reset = (newMarket) => {\n      this.showLoader = true;\n      this.count = 1;\n      this.asks = [];\n      this.bids = [];\n      this.orderbookdata = {};\n      this.snapF = 0;\n      this.marketId = newMarket.Id;\n      // console.log('New Selected Market being fetched in ORDER-BOOK with Id - ' + this.marketId);\n      // this.precisionNumber = 1;\n    };\n\n    ExchangeDataEventBus.$on('change-vega-market', this.reset);\n  },\n\n  mounted() {\n    this.$root.$on('tickerClicked', () => {\n      this.scrollTopBookToBottom();\n    });\n  },\n  \n  destroyed() {\n    ExchangeDataEventBus.$on('change-vega-market', this.reset);\n    clearInterval(this.timeout);\n  },\n};\n</script>\n\n<style src=\"./style.scss\" lang=\"scss\" scoped></style>\n"]}]}